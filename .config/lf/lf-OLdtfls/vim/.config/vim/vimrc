" vim basic {{{
" be iMproved, put this line at TOP of vimrc
set nocompatible
let $VIM = $XDG_CONFIG_HOME . '/vim'
set runtimepath+=/usr/share/vim/vimfiles
set backupdir=$XDG_CACHE_HOME/vim/backup
if !has('nvim')
    set viminfo+=n$XDG_CACHE_HOME/vim/viminfo
endif
" }}}
" Vim-Plug {{{
call plug#begin($VIM . '/bundle')
Plug 'godlygeek/tabular'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-endwise'
" Plug 'maximbaz/lightline-ale'
Plug 'liuchengxu/vim-which-key'
Plug 'w0rp/ale'
Plug 'majutsushi/tagbar'
Plug 'lervag/vimtex'
Plug 'VoldikSS/vim-mma'
Plug 'jpalardy/vim-slime'
Plug 'dylanaraps/wal.vim'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'baskerville/vim-sxhkdrc'
Plug 'lifepillar/vim-mucomplete'
" Plug 'MikeCoder/markdown-preview.vim'
" Plug 'JamshedVesuna/vim-markdown-preview'
" Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() } }
" Plug 'prabirshrestha/async.vim'
" Plug 'prabirshrestha/asyncomplete.vim'
" Plug 'prabirshrestha/asyncomplete-lsp.vim'
" Plug 'prabirshrestha/vim-lsp'
call plug#end()
" }}}
" Vim Settings
" Vim Config {{{
" leader key
let mapleader = ','
let maplocalleader = '\'
" syntax
syntax on
" filetype
filetype on
filetype plugin on
filetype indent on
set backup
set autoread " auto reload files
set encoding=utf-8
set fileencodings=utf-8,gb2312,gb18030,gbk,ucs-bom,cp936,latin1
set spelllang=en,cjk
set clipboard=unnamedplus " use x11 normal clipboard
set autowrite " automatically write a file when leaving a buffer
set hidden
set laststatus=2
set timeoutlen=300 " time out for key code delays
set ttimeoutlen=0 " do not wait after escape key
set diffopt+=vertical " open diff window vertically
set completeopt=menuone,noinsert,preview " comletion
" }}}
" UI basic {{{
set guioptions=di " gui options: dark, icon
set number " show line number
set relativenumber " show relative number
set signcolumn=yes " always show sign column
set showcmd " shows what you are typing as a command
set wildmenu " turn on wild menu on :e <Tab>
set title " change the terminal's title
set showmatch " show matching characters
set scrolloff=2 " minimum lines above and below cursor
set splitright " split into right by default
set splitbelow " split to below by default, better for ale's hover info
set updatetime=100 " update time, related to fugitive sign column update, etc.
set lazyredraw " redraw when needed
set noerrorbells " don't beep
set shortmess+=I " don't show welcome screen
set showtabline=2 " show tabs / buffers on top
set noshowmode " do not show mode on the last line
set display+=lastline " show partial line
set background=dark " color scheme
set mouse=a " enable mouse support in console
" fix for urxvt and st
if !has('nvim')
    if $TERM =~ "rxvt-unicode"
        set ttymouse=urxvt
    elseif $TERM == "st" || $TERM == "st-256color"
        set ttymouse=sgr
    endif
endif
if $TERM != "linux"
    " cursor shape for vte compatible terminals (usrvt, st, xterm, termite)
    let &t_SI = "\e[6 q"
    let &t_SR = "\e[4 q"
    let &t_EI = "\e[2 q"
else
    " cursor shape for linux console
    let &t_ve = "\e[?25h"
    let &t_vi = "\e[?25l"
    let &t_SI = "\e[?0c"
    let &t_SR = "\e[?4c"
    let &t_EI = "\e[?8c"
endif
colorscheme slate
hi clear SignColumn " clear sign column highlight
hi Search ctermbg=3 ctermfg=0
hi IncSearch ctermbg=3 ctermfg=0
hi Folded ctermbg=None ctermfg=8
hi SpellBad ctermfg=9 ctermbg=None
hi SpellCap ctermfg=11 ctermbg=None
" incremental case-insensitive highlight smart case search
set incsearch ignorecase smartcase hlsearch
let g:termdebug_wide=1
" }}}
" Space Tabs Indentations {{{
" indentations
set autoindent
set smartindent
set cindent
" tabs
set tabstop=4
set shiftwidth=0  " make it the same as tabstop
set softtabstop=-1  " make it the same as shiftwidth
set expandtab
set smarttab
" show tabs and trailing white space
set list
set listchars=tab:>-,trail:.
" }}}
" Navigations {{{
" go up/down
nnoremap <silent> j gj
nnoremap <silent> k gk
vnoremap <silent> j gj
vnoremap <silent> k gk
" buffers
nnoremap <silent> <C-H> :bprevious<CR>
nnoremap <silent> <C-L> :bnext<CR>
" toggle fold
nnoremap <space> za
" center the screen when searching
nnoremap n nzzzv
nnoremap N Nzzzv
" }}}
" Autocmd {{{
augroup normal
    autocmd!
    autocmd VimEnter * normal! :startinsert :stopinsert
    autocmd BufNewFile,BufRead *.mac setlocal ft=maxima
    autocmd BufNewFile,BufRead *.plt setlocal ft=gnuplot
    autocmd BufNewFile,BufRead muttrc,*muttrc setlocal ft=neomuttrc
    autocmd BufWritePost *Xresources silent call system("DISPLAY=:0 xrdb -load ".expand('%'))
    autocmd FileType tex,markdown,mma setlocal sw=2 ts=2 sts=2 cole=0
    autocmd FileType tex,markdown,gitcommit setlocal spell
    autocmd FileType gnuplot setlocal commentstring=#%s
    autocmd FileType maxima setlocal commentstring=/*%s*/
    autocmd FileType mma setlocal noet commentstring=(*%s*)
    autocmd VimEnter * if &diff | execute 'windo set wrap' | endif
augroup END
augroup terminal_setup
    autocmd!
    tnoremap <C-\> <C-\><C-N>
    if has('nvim')
        autocmd TermOpen term://* setlocal nonu nornu signcolumn=no
        autocmd TermOpen term://* startinsert
        autocmd TermClose term://* call feedkeys("\<CR>")
    else
        autocmd TerminalOpen * setlocal nonu nornu signcolumn=no
    endif
augroup END
" autocmd FileType tex let b:ale_lsp_root='./'
" }}}
" Fcitx Toggle {{{
" restore input method state when enter insert mode
let s:fcitx_cmd = executable("fcitx5-remote") ? "fcitx5-remote" : "fcitx-remote"
augroup fcitx
    autocmd!
    autocmd InsertLeave * let b:fcitx = system(s:fcitx_cmd) | call system(s:fcitx_cmd.' -c')
    autocmd InsertEnter * if exists('b:fcitx') && b:fcitx == 2 | call system(s:fcitx_cmd.' -o') | endif
augroup END
" }}}
" Netrw -> NerdTree {{{
" Make Netrw function like NerdTree
let g:netrw_home         = $VIM
let g:netrw_banner       = 0   " disable banner
let g:netrw_browse_split = 4   " open file in previous (CTRL-W_p) window
let g:netrw_winsize      = -20 " split size
let g:netrw_dirhistmax   = 0   " disable history
let g:netrw_liststyle    = 0   " thin listing
nnoremap <C-N> :Lexplore<CR>
" }}}
" My own goyo mode {{{
function Goyo()
    if exists("g:goyo_status")
        unlet g:goyo_status
        set nu rnu ru scl=auto stal=2 ls=2
    else
        let g:goyo_status = 1
        set nonu nornu noru scl=no stal=0 ls=0
    endif
endfunction
" }}}
" Execute current file {{{
function ExecCurrentFile()
    if &ft == "sh"
        execute ":!sh %:p"
    elseif &ft == "python"
        execute ":!python %:p"
    elseif &ft == "gnuplot"
        execute ":!gnuplot %:p"
    elseif &ft == "maxima"
        execute ":!maxima -b %:p"
    endif
endfunction
nmap <F5> :call ExecCurrentFile()<CR>
" }}}
" statusline {{{
augroup ALEProgress
  autocmd!
  autocmd User ALEJobStarted redrawstatus
  autocmd User ALELintPost   redrawstatus
  autocmd User ALEFixPost    redrawstatus
augroup END
function! ALEStatusLine()
    let l:ale_avail = get(g:, 'ale_enabled', 0) == 1
        \ && getbufvar(bufnr(''), 'ale_enabled', 1)
        \ && getbufvar(bufnr(''), 'ale_linted', 0) > 0
        \ && ale#engine#IsCheckingBuffer(bufnr('')) == 0
    let l:checking = ale#engine#IsCheckingBuffer(bufnr(''))
    let l:counts = ale#statusline#Count(bufnr(''))
    let l:all_errors = l:counts.error + l:counts.style_error
    let l:all_warnings = l:counts.warning + l:counts.style_warning

    if l:ale_avail == 0
        return ''
    elseif l:checking
        return ' ... '
    elseif l:counts.total == 0
        return ' OK '
    endif

    let l:ale_status = ' '
    let l:ale_status .= l:all_errors == 0 ? '' : printf('E:%2d ', l:all_errors)
    let l:ale_status .= l:all_warnings == 0 ? '' : printf('W:%2d ', l:all_warnings)
    let l:ale_status .= l:counts.info == 0 ? '' : printf('I:%2d ', l:counts.info)
    return l:ale_status
endfunction
hi User1 ctermbg=0
hi User2 ctermbg=8
let &stl  = '%#TabLineSel# %{mode()} %1*'
let &stl .= '%2* %{fugitive#head(6)} %r %1*'
let &stl .= '%< %t %m %w '
let &stl .= '%='
let &stl .= ' %{&ff} |'
let &stl .= ' %{len(&fenc) > 0 ? &fenc : split(&fencs, ",")[0]} |'
let &stl .= ' %{len(&ft) > 0 ? &ft : "no ft"} '
let &stl .= '%2* %3p%% | %3l:%3c %1*'
let &stl .= '%#TabLineSel#%{ALEStatusLine()}%*'
" }}}
" Plugin Settings
" {{{ buftabline
let g:buftabline_numbers = 2
let g:buftabline_indicators = 1
" Have to set styles for the link targets, not BufTabLine*
hi TabLineSel  ctermbg=6    ctermfg=0    cterm=None
hi PmenuSel    ctermbg=None ctermfg=6    cterm=None
hi TabLine     ctermbg=None ctermfg=None cterm=None
hi TabLineFill ctermfg=None ctermbg=None cterm=None
" }}}
" Vim Which Key {{{
let g:which_key_group_dicts = ''
let g:which_key_centered = 0
let g:which_key_hspace = 2
let g:which_key_use_floating_win = 0
let g:which_key_fallback_to_native_key = 1
let g:which_key_map = {
  \ 'q' : [ ':q',  'quit'],
  \ 'Q' : [ ':qa', 'quit all'],
  \ 'd' : [ ':bd', 'close buffer'],
  \ 'w' : [ ':w',  'save'],
  \ 'e' : [ ':e',  'edit (reload)'],
  \ 'x' : [ ':x',  'save and quit'],
  \ 'k' : [ ':call ExecCurrentFile()',  'run current file'],
  \ '.' : [ ':let @/=""', 'clear search hl'],
  \ 'r' : [ ':so $MYVIMRC', 'reload vimrc'],
  \ 'z' : [ ':call Goyo()', 'Goyo mode'],
  \ }
let g:which_key_map_local = {
  \ 'l' : { 'name' : '+vimtex' }
  \ }
call which_key#register(mapleader, "g:which_key_map")
call which_key#register(maplocalleader, "g:which_key_map_local")
nnoremap <silent> <leader> :WhichKey '<leader>'<CR>
vnoremap <silent> <leader> :WhichKeyVisual '<leader>'<CR>
nnoremap <silent> <localleader> :WhichKey '<localleader>'<CR>
vnoremap <silent> <localleader> :WhichKeyVisual '<localleader>'<CR>
" vim unimpaired
nnoremap <silent> [ :WhichKey '['<CR>
nnoremap <silent> ] :WhichKey ']'<CR>
nnoremap <silent> y :WhichKey 'y'<CR>
" }}}
" Vim commentary {{{
nmap <leader>c <Plug>CommentaryLine
omap <leader>c <Plug>Commentary
xmap <leader>c <Plug>Commentary
let g:which_key_map.c = 'comment'
" }}}
" Vim Endwise {{{
" https://github.com/tpope/vim-endwise/issues/41#issuecomment-432905813
autocmd FileType tex
  \ let b:endwise_addition = '\="\\end" . matchstr(submatch(0), "{.\\{-}}")' |
  \ let b:endwise_words = 'begin' |
  \ let b:endwise_pattern = '\\begin{.\{-}}' |
  \ let b:endwise_syngroups = 'texSection,texBeginEnd,texBeginEndName,texStatement'
" }}}
" Markdown {{{
" vim markdown
" fold
let g:markdown_folding = 1
let g:markdown_fenced_languages = ['html', 'python', 'bash=sh', 'sh', 'c']

let g:vim_markdown_folding_style_pythonic = 1
let g:vim_markdown_frontmatter = 1
let g:vim_markdown_new_list_item_indent = 2
" vim-markdown-preview
let vim_markdown_preview_browser='firefox'
" let vim_markdown_preview_use_xdg_open=1
let vim_markdown_preview_temp_file=1
let vim_markdown_preview_github=0
" preview
let g:mkdp_auto_start = 0
let g:mkdp_browser = 'firefox'
" }}}
" Fugitive {{{
" show the log in a pretty way
function! GitRepoLogAll()
    silent Git log --all --decorate --oneline --graph --date-order
    redraw!
endfunction
" key bindings
let g:which_key_map.g = {
  \ 'name' : '+git-operation',
  \ 'b' : [ ':Gblame', 'git blame' ],
  \ 'd' : [ ':Gvdiff', 'git diff' ],
  \ 'c' : [ ':Gcommit -v', 'git commit' ],
  \ 'g' : [ ':!tig -C "$(dirname "$(realpath "'.expand('%:p').'")")"', 'run tig' ],
  \ 's' : [ ':Gstatus', 'git status' ],
  \ 'l' : [ ':call GitRepoLogAll()', 'git show log' ],
  \ 'u' : [ ':Gpush', 'git push' ],
  \ 'f' : [ ':Gpull', 'git pull' ],
  \ 't' : {
    \ 'name' : '+stash',
    \ 's' : [ ':Git stash', 'git stash' ],
    \ 'p' : [ ':Git stash pop', 'git stash pop' ],
    \ 'l' : [ ':Git stash list', 'git stash list' ]
    \ }
  \ }
" }}}
" Gitgutter {{{
" the previous ~_ take two columns
let g:gitgutter_sign_modified_removed   = '^'
" update signs after focus
let g:gitgutter_terminal_reports_focus  = 0
let g:gitgutter_max_signs = 1000
" }}}
" ALE {{{
" automatically pop up completion candidates
let g:ale_completion_enabled = 1
let g:ale_completion_delay   = 0
" set sign column characters
let g:ale_sign_column_always   = 1
let g:ale_sign_error           = '>'
let g:ale_sign_warning         = '-'
" show pop up in balloons
let g:ale_set_balloons         = 1
let g:ale_set_quickfix         = 1
" only lint when leaving insert mode
let g:ale_lint_on_insert_leave = 1
let g:ale_lint_on_text_changed = 'normal'

" clangd needs a compile_commands.json file for the project
let g:ale_linters = {
  \ 'c': ['ccls'],
  \ 'cpp': ['ccls'],
  \ 'python': ['pyls'],
  \ 'lua': ['luacheck'],
  \ 'sh': ['shellcheck'],
  \ 'tex': ['texlab', 'chktex'],
  \ 'fortran': ['gcc'],
  \ }
let g:ale_fixers = {
  \ '*': ['remove_trailing_lines', 'trim_whitespace'],
  \ 'c': ['clang-format', 'clangtidy'],
  \ 'cpp': ['clang-format', 'clangtidy'],
  \ 'sh': ['shellcheck']
  \ }
let g:ale_linters_explicit = 1
let g:ale_c_parse_makefile = 1

" Key mapping
let g:which_key_map.a = {
  \ 'name' : '+ale',
  \ 'r' : [ '<Plug>(ale_find_references)', 'find references' ],
  \ 'd' : [ '<Plug>(ale_go_to_definition)', 'go to definition' ],
  \ 'n' : [ '<Plug>(ale_next_wrap)' , 'go to next ale mark' ],
  \ 'p' : [ '<Plug>(ale_previous_wrap)' , 'go to previous ale mark' ],
  \ 'j' : [ '<Plug>(ale_next_wrap)' , 'go to next ale mark' ],
  \ 'k' : [ '<Plug>(ale_previous_wrap)' , 'go to previous ale mark' ],
  \ 'h' : [ '<Plug>(ale_hover)' , 'show hover info' ],
  \ 'R' : [ '<Plug>(ale_rename)' , 'rename variable'],
  \ }
" }}}
" Vim Tex {{{
let g:tex_flavor = 'latex'
" enable vimtex fold
let g:vimtex_fold_enabled = 1
let g:vimtex_syntax_enabled = 0
" start vim with a server, see ':h vimtex-clientserver'
if empty(v:servername) && exists('*remote_startserver') && !empty($DISPLAY) && empty($TMUX)
    call remote_startserver('VIM')
endif
" viewer setting
let g:vimtex_view_method = 'zathura'
" matching delimiters is causing performance issues
let g:vimtex_matchparen_enabled = 0
" compiler
let g:vimtex_compiler_method = "latexmk"
let g:vimtex_compiler_latexmk = {
    \ 'build_dir' : 'output',
    \}
augroup latex
    autocmd!
    autocmd FileType tex ab tp textperiodcentered
    autocmd FileType tex ab te textellipsis
    autocmd FileType tex ab op originalpage{}<Left>
    " add normal font in math
    autocmd FileType tex xnoremap <localleader>n s\mathrm{}<Esc>P
    autocmd FileType tex nnoremap <localleader>n a\mathrm{}<Left>
    " add red color, or to existing text
    autocmd FileType tex xnoremap <localleader>m s{\color{red}}<Esc>P
    autocmd FileType tex nnoremap <localleader>m a{\color{red}}<Left>
    " remove red color depends on vim-surround
    autocmd FileType tex map <localleader>d <Plug>Dsurround}d11l
augroup END
" }}}
" Mathematica {{{
let g:mma_candy = 2
" }}}
" vim-slime {{{
let g:slime_no_mappings = 1
xmap <leader>s <Plug>SlimeRegionSend
nmap <leader>s <Plug>SlimeParagraphSend
let g:which_key_map.s = "slime"
" set config to use the pane on the right by default
let g:slime_default_config = {
    \ "socket_name": get(split($TMUX, ","), 0),
    \ "target_pane": "{right-of}"
    \ }
" vim terminal config
let g:slime_vimterminal_config = {
    \ "vertical": 1
    \ }
let g:slime_dont_ask_default = 0
" use temp file
let g:slime_paste_file = tempname()
" ipython specific setting
let g:slime_python_ipython = 0
" targets
if len($TMUX) != 0
    let g:slime_target = "tmux"
    let g:slime_dont_ask_default = 1
elseif match($TERM, "screen") != -1
    let g:slime_target = "screen"
else
    let g:slime_target = "vimterminal"
endif
" }}}
" vim-lsp {{{
" let g:which_key_map.l = { "name": "language server" }
" if executable('pyls')
"     " pip install python-language-server
"     au User lsp_setup call lsp#register_server({
"                 \ 'name': 'pyls',
"                 \ 'cmd': {server_info->['pyls']},
"                 \ 'whitelist': ['python'],
"                 \ })
" endif
" if executable('texlab')
"     au User lsp_setup call lsp#register_server({
"                 \ 'name': 'texlab',
"                 \ 'cmd': {server_info->['texlab']},
"                 \ 'whitelist': ['bib','tex'],
"                 \ })
" endif
" function! s:on_lsp_buffer_enabled() abort
"     setlocal omnifunc=lsp#complete
"     setlocal signcolumn=yes
" endfunction
" augroup lsp_install
"     au!
"     " call s:on_lsp_buffer_enabled only for languages that has the server registered.
"     autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
" augroup END
" }}}
" asyncomplete {{{
" inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
" inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
" inoremap <expr> <cr>    pumvisible() ? asyncomplete#close_popup() : "\<cr>"
" imap <c-space> <Plug>(asyncomplete_force_refresh)
" let g:asyncomplete_auto_popup = 1
" let g:asyncomplete_auto_completeopt = 0
" }}}
" ultisnippet {{{
let g:UltiSnipsJumpForwardTrigger="<Tab>"
let g:UltiSnipsJumpBackwardTrigger="<S-Tab>"
" }}}
" tagbar {{{
let g:tagbar_width = max([25, winwidth(0) / 5])
let g:tagbar_compact = 1
" }}}
let g:mucomplete#enable_auto_at_startup = 1
let g:mucomplete#completion_delay = 1000
let g:mucomplete#chain = ['path', 'omni', 'spel']
" vim:foldmethod=marker:foldlevel=0
