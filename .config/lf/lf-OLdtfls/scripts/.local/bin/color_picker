#!/usr/bin/env python3
# Based on https://github.com/seebye/chameleon
import math
import contextlib
import PIL.Image
from Xlib import X, display, Xcursorfont


@contextlib.contextmanager
def create_font_cursor(display, which):
    """Implementation of libX11 XCreateFontCursor,
    creates one of the default cursors.

    Arg:
        display: Xlib display
        which: one of Xcursorfont

    Yields:
        the acquired cursor object
    """
    # see: https://github.com/mirror/libX11/blob/78851f6a03130e3c720b60c3cbf96f8eb216d741/src/Cursor.c # noqa
    black, white = (0, 0, 0), (65535, 65535, 65535)
    font, cursor = None, None

    try:
        font = display.open_font('cursor')
        cursor = font.create_glyph_cursor(
            font, which, which + 1,
            black, white)
        yield cursor
    finally:
        if cursor:
            cursor.free()
        if font:
            font.close()


@contextlib.contextmanager
def pick_coordinate(display, cursor):
    """Changes the cursor and grabs the pointer for every window.

    Args:
        display: Xlib display
        cursor: cursor object or X.NONE
    """
    try:
        display.screen().root.grab_pointer(
            0, X.PointerMotionMask | X.ButtonReleaseMask | X.ButtonPressMask,
            X.GrabModeAsync, X.GrabModeAsync, X.NONE,
            cursor, X.CurrentTime)
        display.flush()
        yield
    finally:
        display.ungrab_pointer(0)
        display.flush()


def get_pointer_position(root, event=None):
    """Extracts the pointer position from the event,
    falls back to root.query_pointer on failure.

    Args:
        root: Xlib root window
        event: Xlib event

    Returns:
        (tuple of int): (x, y) pointer position
    """
    try:
        return event.root_x, event.root_y
    except AttributeError:
        reply = root.query_pointer()
        return reply.root_x, reply.root_y


def get_pixel(wnd, x, y, w, h):
    """Determines the pixel at the passed position.

    Arg:
        wnd: Xlib window
        x (int): self-explanatory
        y (int): self-explanatory

    Returns:
        (tuple of int): (r, g, b) color tuple
    """
    image = wnd.get_image(x, y, w, h, X.ZPixmap, 0xffffffff)
    return list(PIL.Image.frombytes("RGB", (w, h), image.data, "raw", "BGRX")
                .getdata())


class ColorWindow:
    """Window class used to display a color,
    e.g. a selected one or a live preview

    Attributes:
        margin (int): distance to the pointer
        size (int): window size, not changeable
        size_border (int): border size
    """

    def __init__(self, display, margin, size, color=(0, 0, 0)):
        self._last_color = color
        self._display = display
        self._screen = display.screen()
        self._root = self._screen.root
        self.margin = margin
        self.size = size
        self._wnd = None
        self._gc = None
        res = self._root.get_geometry()
        self.screen_width, self.screen_height = res.width, res.height

    def map(self):
        """Creates a window and gc if they don't exists already,
        and maps it afterwards.

        Returns:
            X11 window
        """
        if not self._wnd:
            self._wnd = self._root.create_window(
                0, 0, self.size, self.size, 0,
                self._screen.root_depth,
                X.InputOutput, X.CopyFromParent,
                event_mask=X.ExposureMask,
                colormap=X.CopyFromParent,
                override_redirect=True)
            self._gc = self._wnd.create_gc()
        self._wnd.map()
        self._display.flush()
        return self._wnd

    def unmap(self):
        """Unmaps the window if it exists."""
        if self._wnd:
            self._wnd.unmap()
            self._wnd.destroy()
            self._wnd = None
            self._display.flush()

    def move(self, x, y):
        """Moves the window based on the given position
        and tries to keep it visible while doing so.

        Args:
            x (int): x-cursor position
            y (int): y-cursor position
        """
        sqrt2 = math.sqrt(2)
        if x + self.size + self.margin / sqrt2 > self.screen_width:
            x = x - self.size - int(self.margin / sqrt2)
        else:
            x = x + int(self.margin / sqrt2)
        if y + self.size + self.margin / sqrt2 > self.screen_height:
            y = y - self.size - int(self.margin / sqrt2)
        else:
            y = y + int(self.margin / sqrt2)
        self._wnd.configure(x=x, y=y)

    def _set_color(self, r, g, b):
        """Changes the foreground color of the gc object.

        Args:
            r (int): red
            g (int): green
            b (int): blue
        """
        self._gc.change(foreground=((0xff << (8 * 3)) |
                                    (int(r) << (8 * 2)) |
                                    (int(g) << (8 * 1)) |
                                    (int(b) << (8 * 0))))

    def _rectangle(self, x, y, width, height, r, g, b):
        """Draws a rectangle with the current foreground color on the window"""
        self._set_color(r, g, b)
        self._wnd.rectangle(self._gc, x, y, width, height)

    def _fill_rectangle(self, x, y, width, height, r, g, b):
        """Draws a rectangle with the current foreground color on the window"""
        self._set_color(r, g, b)
        self._wnd.fill_rectangle(self._gc, x, y, width, height)

    def _draw_text(self, x, y, text, r, g, b):
        """Draws a rectangle with the current foreground color on the window"""
        self._set_color(r, g, b)
        self._wnd.draw_text(self._gc, x, y, text)

    def draw(self, rgb, w, h, x0, y0):
        """Redraws the window.

        Args:
            rgb (tuple of int): new color or None
        """
        for i in range(w):
            for j in range(h):
                self._fill_rectangle(i * self.size // w, j * self.size // h,
                                     self.size // w + 1, self.size // h + 1,
                                     *rgb[j * w + i])
        self._rectangle(x0 * self.size // w, y0 * self.size // h,
                        self.size // w, self.size // h, 255, 255, 255)
        self._rectangle(x0 * self.size // w + 1, y0 * self.size // h + 1,
                        self.size // w - 2, self.size // h - 2, 0, 0, 0)
        self._rectangle(x0 * self.size // w + 2, y0 * self.size // h + 2,
                        self.size // w - 4, self.size // h - 4, 255, 255, 255)
        self._draw_text(x0 * self.size // w, y0 * self.size // h,
                        "#{0:02x}{1:02x}{2:02x}".format(*rgb[y0 * w + x0]),
                        255, 0, 0)


class WindowMapper(contextlib.ContextDecorator, list):
    """Ensures unmapping of windows"""

    def __init__(self, *wnds):
        self._mapped = False
        self.extend(wnds)

    def append(self, wnd):
        if self._mapped:
            wnd.map()
        super().append(wnd)

    def __enter__(self):
        for wnd in self:
            wnd.map()
        self._mapped = True
        return self

    def __exit__(self, *args):
        for wnd in self:
            wnd.unmap()


def main():
    pixels = 9
    margin = 20
    size = 200
    fmt = "#{0:02x}{1:02x}{2:02x}"
    disp = display.Display()
    root = disp.screen().root
    wnd = ColorWindow(disp, margin, size)

    with WindowMapper(wnd) as mapper,\
            create_font_cursor(disp, Xcursorfont.tcross) as cursor,\
            pick_coordinate(disp, cursor):
        while 1:
            e = disp.next_event()
            while disp.pending_events() > 0:
                e = disp.next_event()
            x, y = get_pointer_position(root, e)
            screen_width = root.get_geometry().width
            screen_height = root.get_geometry().height
            x_start = 0 if x - pixels // 2 < 0 else x - pixels // 2
            y_start = 0 if y - pixels // 2 < 0 else y - pixels // 2
            x_end = screen_width - 1 if x + pixels // 2 >= screen_width \
                else x + pixels // 2
            y_end = screen_height - 1 if y + pixels // 2 >= screen_height \
                else y + pixels // 2
            width, height = x_end - x_start + 1, y_end - y_start + 1
            rgb = get_pixel(root, x_start, y_start, width, height)
            rgb_cursor = rgb[(y - y_start) * width + (x - x_start)]

            if e.type == X.ButtonPress and e.detail == 1:
                print(fmt.format(*rgb_cursor))
                break
            elif e.type == X.MotionNotify:
                for w in mapper:
                    w.move(x, y)
                wnd.draw(rgb, width, height, x - x_start, y - y_start)


if __name__ == "__main__":
    main()
