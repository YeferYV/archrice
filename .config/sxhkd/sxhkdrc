#
# reopen/reload
#

# terminal emulator
super + {_, shift } + Return
	{ \
    wezterm --config "window_background_image_hsb = \{ brightness = 0.10 \}"; \
	, wezterm --config "window_background_opacity=0.7" --config "window_background_image=''" & picom \
	# , bspc rule -a \* -o state=floating && wezterm; \
	# , bspc node -p west  -o 0.6 && wezterm; \
	# , bspc node -p north -o 0.6 && wezterm; \
	# , bspc node -p south -o 0.4 && wezterm; \
	}

# dunst close/reopen notification
ctrl + {_, shift} + Escape
	dunstctl {close, history-pop}

# stop cronbat
super + Escape
  ps aux | grep cronbat | awk '\{print $2\}' | xargs kill -9 & dunstctl close

# make sxhkd reload its configuration files:
super + shift + Escape
	pkill -USR1 -x sxhkd

#
# Tabbed windows
#

# # add to tabbed container
# super + control + b; {Left,Down,Up,Right}
#   tabc attach $(bspc query -N -n) {$(bspc query -N -n west),$(bspc query -N -n south),$(bspc query -N -n north),$(bspc query -N -n east)}
#
# # create/remove from tabbed container
# super + control + b; {c,r}
#   id=$(bspc query -N -n); \
#   [[ "$(tabc printclass $id)" == "tabbed" ]] \
#   && tabc detach $id \
#   || tabc create $id
#
# # toggle autoattach in tabbed container
# super + control + b; a
#   tabc autoattach $(bspc query -N -n)

# #
# # preselect
# #
#
# # preselect the ratio
# super + control + e; {1-9}
# 	bspc node -o 0.{1-9}
#
# # preselect the direction
# super + control + e; {h,j,k,l}
# 	bspc node -p {west,south,north,east}
#
# # cancel the preselection for the focused node/desktop
# super + control + e; {c, shift + c}
#   { \
# 	  bspc node -p cancel \
# 	, bspc query -N -d | xargs -I id -n 1 bspc node id -p cancel \
#   }
#
# # send the newest marked node to the newest preselected node
# super + control + e; n
# 	bspc node newest.marked.local -n newest.!automatic.local

# #
# # Receptacles
# #
#
# # Move new node to receptacle automatically
# super + control + l; {m, shift + m}
#   { $HOME/.config/bspwm/bspsubscribe, killall bspsubscribe }
#
# # Close all receptacle
# super + control + l; c
#   for win in `bspc query -N -n .leaf.\!window`; do bspc node $win -k ; done;
#
# # Insert receptacle
# super + control + l; {h,j,k,l}
#   bspc node --presel-dir {west,south,north,east} -i
#
# # Move to receptacle
# super + control + l; m
# 	ID=$(bspc query -N -n) \
# 	bspc node $ID -n $(bspc query -N -n .leaf.\!window)

#
# windows flags/state
#

# close/kill window
super + {_, shift} + x
	bspc node -{c,k}

# alternate between the tiled and monocle layout
super + control + f; m
	bspc desktop -l next

# quit/restart bspwm
super + control + f; {q,r}
	bspc {quit,wm -r}

# set the window state
super + control + f; {t,p,f,shift+f}
	bspc node -t {tiled,pseudo_tiled,fullscreen,floating}

# set the node flags
super + control + f; {shift + m,l,s,p,h}
	bspc node --flag {marked,locked,sticky,private,hidden}

# show hidden nodes one by one
super + control + f; {plus}
  bspc node $(bspc query -N -n .hidden.local.window | head -n1) --flag hidden=off
  # bspc node $(bspc query -N -n .hidden -d focused | head -n1) --flag hidden=off # show all hidden nodes

#
# Rofi
#

# # fzf alt-tab
# super + tab
#   bspc rule -a \* -o state=floating && \
#   wezterm start --always-new-process -- bash -c \
#   'test=$(fzf < <((xdo id -D & xdo id -d) | xargs -I var xprop -id var _NET_WM_NAME | cut -d"\"" -f2)) && xdo activate $( xdo id -a "$test");'

# rofi alt-tab
alt + Tab
  N=$(($(xprop -root _NET_CLIENT_LIST_STACKING | wc -w) - 4)); \
  [ $N -le 5 ]&& export RWIDTH="$((N * 20))%" RHEIGHT=33%; \
  [[ 6 -le $N && $N -le 10 ]]&& export RHEIGHT=66%; \
  rofi \
    -show window -window-thumbnail -show-icons \
    -kb-accept-entry "!Alt-Tab,!Alt_L,!Alt+Alt_L,Return" \
    -kb-row-right "Alt+Tab,Alt+l" \
    -kb-row-up "Alt+k" \
    -kb-row-down "Alt+j" \
    -kb-row-left "Alt+ISO_Left_Tab,Alt+h"& \
  xdotool keyup Tab;\
  xdotool key Tab;

# rofi drun (dmenu for .desktop apps)
super + control + r; d
  A='rofimoji --action clipboard copy print --files fontawesome nerd_font gitmoji emojis latin-1'; \
  COL=10 \
  ICON=10% \
  ENTRY=true \
  SWITCHER=true \
  rofi -modi "window,run,drun,emoji:$A,ssh" -show drun

# rofi emoji
super + control + r; {e, shift + e}
  rofimoji \
    --action clipboard copy print \
    { \
      --selector-args="-theme ~/.config/rofi/unicode.rasi" \
      --files fontawesome nerd_font gitmoji emojis latin-1 \
    , --selector-args="-theme ~/.config/rofi/unicode.rasi -theme-str 'window \{width:90%; height:50%;\}' " \
      --files all \
    }

#
# swap/focus window
#

# focus or send to the given desktop
super + {_,shift} + {1-9,0,minus,equal}
	bspc {desktop -f,node -d} '^{1-9,10,11,12}'

# focus the last node/desktop
super + {semicolon,grave}
	bspc {node,desktop} --focus last

# swap the last node/desktop
super + shift + {semicolon,grave}
	bspc node --focus last && \
	bspc {node,desktop} --swap last

# focus the next/previous window in the current desktop
super + {_, shift} + c
	bspc node -f {next,prev}.local.!hidden.window

# focus the node in the given direction
super + {h,j,k,l}
	{ DIR=west FALLBACK=prev; , DIR=south; , DIR=north; , DIR=east FALLBACK=next; } \
	bspc node -f $DIR.!sticky.!hidden || bspc node -f $FALLBACK.leaf.!sticky.!hidden
	# bspc node -f $DIR.!marked || bspc node -f $FALLBACK.leaf.!marked   # for manually marked windows
	# bspc node -f $DIR.!private || bspc node -f $FALLBACK.leaf.!private # for floating windows
	# bspc node -f $DIR || bspc node -f $FALLBACK.leaf
	# bspc node -f $DIR || bspc node -f $FALLBACK.window

# Swap focused window with the one in the given direction
super + shift + {h,j,k,l}
  $HOME/.config/bspwm/bspwm_smart_move {west,south,north,east}

# focus the next/previous desktop in the current monitor
super + {s,f}
	bspc desktop -f {prev,next}.local

# swap the next/previous desktop in the current monitor
super + shift + {s,f}
	bspc desktop -s {prev,next}.local

# swap the current node and the biggest window
super + control + s; shift + b
	bspc node -s biggest.window

# focus the node for the given path jump
super + control + s; {p,b,f,s}
	bspc node -f @{parent,brother,first,second}

# Increase/descrease gap size
super + control + s; {minus,plus}
	bspc config window_gap $(($(bspc config window_gap) {-,+} 1))

# focus the older or newer node in the focus history
super + control + s; {o,n}
	bspc wm -h off; \
	bspc node {older,newer} -f; \
	bspc wm -h on

# rotate focused tree CCW/CW
super + control + s; {r, shift + r}
	bspc node @focused:/ -C {forward,backward}

# Rotate the current parent nodes
super + control + s; {Right, Left}
	bspc node @parent --rotate {90,270}

# Rotate the current focused nodes
super + control + s; {Down, Up}
	bspc node @focused:/ -R {90,270}

#
# Toggles
#

# toggle polybar
super + control + t; space
	polybar-msg cmd toggle; bspc config top_padding {0,18}

# toggle node border (width 1)
super + control + t; n
	bspc config -n focused border_width {0,1}

# toggle node border (width 2)
super + control + t; shift + n
	bspc config -n focused border_width {0,2}

# toggle desktop border (width 1)
super + control + t; d
  bspc config -d focused border_width {0,1}

# toggle desktop border (width 2)
super + control + t; shift + d
  bspc config -d focused border_width {0,2}

# toggle singleton border
super + control + t; s
  bspc config borderless_singleton {true,false}

# toggle gaps (no border)
super + control + t; 0
	{ \
		bspc config window_gap -1 & bspc config border_width 1; \
	, bspc config window_gap 12 & bspc config border_width 1; \
	}

# toggle gaps (border_width 1)
super + control + t; 1
	{ \
		bspc config window_gap 0 & bspc config border_width 1; \
	, bspc config window_gap 12 & bspc config border_width 1; \
	}

# toggle gaps (border_width 2)
super + control + t; 2
	{ \
		bspc config window_gap 0 & bspc config border_width 2; \
	, bspc config window_gap 12 & bspc config border_width 2; \
	}

#
# move/resize windows
#

# balance desktop's nodes
super + control + w; b
  bspc node @/ -B

# increase/decrease window size (zoom in/out)
super + control + w; {minus,plus}
	{ \
	  xdotool getactivewindow windowmove --relative -- -50 -25 ; xdo resize -w +100 -h +50; \
	, xdotool getactivewindow windowmove --relative -- +50 +25 ; xdo resize -w -100 -h -50; \
	}

# hover window to left/down/up/right
super + control + w; {h,j,k,l}
  POLYBAR=18; \
  BORDER=2; \
	bspc config -n focused border_width 1; \
  xdotool getdisplaygeometry | awk '\{print $1" "$2\}' | read W H; \
	{ \
	  x=0;         y=$POLYBAR;  w=$((W/2 - BORDER));  h=$((H   - BORDER - POLYBAR)); \
	, x=0;         y=$((H/2));  w=$((W   - BORDER));  h=$((H/2 - BORDER )); \
	, x=0;         y=$POLYBAR;  w=$((W   - BORDER));  h=$((H/2 - BORDER - POLYBAR)); \
	, x=$((W/2));  y=$POLYBAR;  w=$((W/2 - BORDER));  h=$((H   - BORDER - POLYBAR)); \
	} \
  xdo move -x $x -y $y; xdo resize -w $w -h $h

# move floating window by 10px
super + control + {Left, Down, Up, Right}
	bspc node -v {-10 0,0 10,0 -10,10 0}

# hover window to corner
super + control + w; {Left, Down, Up, Right}
  hover {left,down,up,right}

# xdo resize (small/medium)
super + control + w; {s,m}
  xdo resize {-w 800 -h 600, -w 681 -h 382}

# xdo fixedscreen 1366x768 (fullscreen no visible borders)
super + control + w; {f, shift + f}
	bspc config -n focused border_width 0; \
  xdotool getdisplaygeometry | awk '\{print $1" "$2\}' | read W H; \
	{ \
	  x=0;   y=18;  w=$((W)); h=$((H - 18)); \
	, x=0;   y=0;   w=$((W)); h=$((H)); \
	} \
	xdo move -x $x -y $y; xdo resize -w $w -h $h;

# xdo fixedscreen 1366x768 (min-max window)
super + control + w; {m, shift + m}
	bspc config -n focused border_width 2; \
  xdotool getdisplaygeometry | awk '\{print $1" "$2\}' | read W H; \
	{ \
	  x=0;   y=18;  w=$((W - 4)); h=$((H - 22)); \
	, x=0;   y=0;   w=$((W - 4)); h=$((H - 4)); \
	} \
	xdo move -x $x -y $y; xdo resize -w $w -h $h;

#
# Smart resize
#

# Smart resize, will grow or shrink depending on location.
# Will always grow for floating nodes.
super + {Left,Down,Up,Right}
  n=40; \
  { d1=left;   d2=right;  dx=-$n; dy=0;   \
  , d1=bottom; d2=top;    dx=0;   dy=$n;  \
  , d1=top;    d2=bottom; dx=0;   dy=-$n; \
  , d1=right;  d2=left;   dx=$n;  dy=0;   \
  } \
  bspc node --resize $d1 $dx $dy || bspc node --resize $d2 $dx $dy

# Smart resize, will grow or shrink depending on location.
# Will always shrink for floating nodes.
super + shift + {Left,Down,Up,Right}
  n=40; \
  { d1=left;   d2=right;  dx=-$n; dy=0;   \
  , d1=bottom; d2=top;    dx=0;   dy=$n;  \
  , d1=top;    d2=bottom; dx=0;   dy=-$n; \
  , d1=right;  d2=left;   dx=$n;  dy=0;   \
  } \
  bspc node --resize $d2 $dx $dy || bspc node --resize $d1 $dx $dy


########################################
###      alphabetic_hotkeys          ###
#######################################

# super volume
super + XF86Audio{Raise,Lower}Volume
  pactl set-sink-volume @DEFAULT_SINK@ {+,-}5%

# volume
XF86Audio{Raise,Lower}Volume
  pactl set-sink-volume @DEFAULT_SINK@ {+,-}2%

# (un)mute audio
XF86AudioMute
  pactl set-sink-mute @DEFAULT_SINK@ toggle

# (un)mute mic
XF86AudioMicMute
  pactl set-source-mute @DEFAULT_SOURCE@ toggle

# backlight
XF86MonBrightness{Down,Up}
  light -{U,A} .11

# super backlight
super + XF86MonBrightness{Down,Up}
  light -{U,A} 2

# dimmer
shift + XF86MonBrightness{Down,Up}
  xcalib {-co 75 -a,-c}

# dmenu(u)mount
super + {F11,F12}
  {dmenumount,dmenuumount}

# chromium next-toggle-prev
super + KP_{Right,Begin,Left}
  playerctl --player=chromium {next,play-pause,previous}

# mpv next-toggle-prev
alt + KP_{Right,Begin,Left}
  playerctl --player=mpv {next,play-pause,previous}

# mpv vol (down,up)
alt + KP_{Down,Up}
	{ \
	  playerctl --player=mpv volume 0.1-; \
	, [[ "$(playerctl -p mpv volume)" < 1 ]]&& playerctl --player=mpv volume 0.1+; \
	}

# mpc next-toggle-prev-vol
KP_{Right,Begin,Left,Down,Up}
  mpc {next,toggle,prev,volume -2,volume +2}

# screenshot (fullscreen,_)
{Print, super + Print}
	maimpick {fullscreen,_}

# compositor wallpaper background
super + control + c; w
	{\
		picom --transparent-clipping \
		      --shadow-radius=10 \
		      --shadow-opacity=0.9 \
		      --shadow-offset-x=-10 \
		      --shadow-offset-y=-15 \
          --frame-opacity=0.5 \
          --fade-delta=0 \
          # --inactive-dim=0.2 \
          # --active-opacity=0.95 \
          # --inactive-opacity=1.0 \
          # --refresh-rate 30\
				  ,\
    killall picom\
	}

# compositor blur background
super + control + c; b
	{ \
	  picom --blur-method="dual_kawase" \
	        --backend="glx" \
	        --opacity-rule="70:class_g *= 'neovide'" \
	        --opacity-rule="70:class_g *= 'wezterm'" \
	        --fade-delta=0 \
	        # --inactive-dim=0.2 \
				  ,\
	  killall picom \
	}

# compositor keep background
super + control + c; k
	{picom --fade-delta=0, killall picom}

# compositor no shadow
super + control + c; s
	{picom --shadow-opacity=0 --transparent-clipping --fade-delta=0, killall picom}

# compositor decrease/increase transparency (picom-trans requires xorg-xwininfo)
super + control + {minus,plus}
  xdo id -d -c | xargs -I id -n 1 picom-trans -w id {-2,+4}
  # bspc query -N -d | xargs -I id -n 1 picom-trans -w id {-2,+4}
  # xdo pid $ID  		# xdotool getactivewindow getwindowpid
  # xdo id -p $PID  # xdotool getactivewindow

# Nightlight temperature
super + control + n; {1,2,3,4,5}
  redshift {-x, -O 2222, -O 3333, -O 4444, -O 5555}

# toggle terminal background
super + control + p; t
  (printf "\x1b]11;{#0c0c0c,#000000}\x1b\\\\") > $(find /dev/pts -iname '[0-9]')

# pywal offline wallpaper
super + control + p; o
  wal --cols16 -s -e -i { "$HOME/bgs/bgi/eyelust/eyelust", "/tmp/pywal" } -o ~/.config/wal/postrun

# pywal online wallpaper
super + control + p; {w,r}
  { curl -s "https://wallhaven.cc/api/v1/search?sorting=toplist&page=$(shuf --head-count=1 --input-range=1-10)" | jq ".data[$(shuf --head-count=1 --input-range=1-24)].path" | xargs curl -LO --output-dir /tmp/pywal --create-dirs;\
  , curl -H "User-agent: 'your bot 0.1'" "https://www.reddit.com/r/wallpaper.json?limit=100" | jq ".data.children[$(shuf --head-count=1 --input-range=1-100)].data.url_overridden_by_dest" | xargs curl -LO --output-dir /tmp/pywal --create-dirs;\
  } wal --iterative --cols16 -s -i /tmp/pywal;
  # curl -s "https://wallhaven.cc/api/v1/search?sorting=random&q=4k" | jq '.data[0].path' | xargs curl -LO --output-dir /tmp/pywal --create-dirs;

# dmenu launcher
super + {_, shift} + p
	{ \
		dmenu_run; \
	, wezterm start $(dmenu_path | dmenu); \
	}

# browser
super + {_, shift} + w
  { google-chrome --process-per-tab || google-chrome-stable --process-per-tab, killall chrome}
  # { google-chrome-stable --process-per-site, killall chrome}

# # TextToSpeech
# super + control + x; {m,f}
#   {xclip -o | mimic, xsel -b | festival --tts, killall mimic festival}
