#
# wm independent hotkeys
#

# terminal emulator
super + {_,shift + ,ctrl + ,shift + ctrl + ,alt + }Return
	{ \
		$TERMINAL; \
	, bspc node -p east -o 0.5 && $TERMINAL; \
	, bspc node -p south -o 0.5 && $TERMINAL; \
	, bspc rule -a \* -o state=floating && $TERMINAL; \
	, bspc rule -a \* -o state=floating && wezterm --config initial_rows=47 --config initial_cols=169; \
	}

# terminal emulator
mod1 + {_,shift +,ctrl +}Return
  {kitty,alacritty,cool-retro-term}

# dunst close/reopen notification
ctrl + {_,shift + }Return
	dunstctl {close, history-pop}

# stop cronbat
super + Escape
  ps aux | grep cronbat | awk '\{print $2\}' | xargs kill -9 & dunstctl close

# make sxhkd reload its configuration files:
super + shift + Escape
	pkill -USR1 -x sxhkd

#
# Tabbed windows
#

# add to tabbed container
super + alt + {Left,Down,Up,Right}
  tabc attach $(bspc query -N -n) {$(bspc query -N -n west),$(bspc query -N -n south),$(bspc query -N -n north),$(bspc query -N -n east)}

# create/remove from tabbed container
super + z
  id=$(bspc query -N -n); \
  [[ "$(tabc printclass $id)" == "tabbed" ]] \
  && tabc detach $id \
  || tabc create $id

# toggle autoattach in tabbed container
super + shift + z
  tabc autoattach $(bspc query -N -n)

#
# bspwm hotkeys
#

# quit/restart bspwm
super + alt + {q,r}
	bspc {quit,wm -r}

# close and kill
super + {_,shift + }q
	bspc node -{c,k}

# alternate between the tiled and monocle layout
super + m
	bspc desktop -l next

# send the newest marked node to the newest preselected node
super + ctrl + u
	bspc node newest.marked.local -n newest.!automatic.local

# swap the current node and the biggest window
super + g
	bspc node -s biggest.window

#
# state/flags
#

# set the window state
super + {t,shift + t,s,f}
	bspc node -t {tiled,pseudo_tiled,floating,fullscreen}

# set the node flags
super + ctrl + {m,x,y,z}
	bspc node -g {marked,locked,sticky,private}

# set virtual monitor
super + ctrl + {v,b}
  bspc monitor -g {685x765+685+0, 1366x765+0+0}

#
# focus/swap
#

# focus the node in the given direction
super + {h,j,k,l}
	bspc node -f {west,south,north,east}

# Swap focused window with the one in the given direction
mod4 + shift + {h,j,k,l}
  $HOME/.config/bspwm/bspwm_smart_move {west,south,north,east}

# focus the node for the given path jump
super + {p,b,comma,period}
	bspc node -f @{parent,brother,first,second}

# focus the next/previous window in the current desktop
super + {_,shift + }c
	bspc node -f {next,prev}.local.!hidden.window

# focus the next/previous desktop in the current monitor
super + alt + {minus,equal}
	bspc desktop -f {prev,next}.local

# no/reset gaps size
super + bracket{left,right}
	{ \
		bspc config window_gap -1 & bspc config border_width 1; \
	, bspc config window_gap 12 & bspc config border_width 2; \
	}

# Increase/descrease gap size
mod4 + shift + bracket{left,right}
	bspc config window_gap $(($(bspc config window_gap) {+,-} 2))

# toggle node border
super + {apostrophe,backslash}
	bspc config -n focused border_width {0,2}

# toggle desktop border
mod4 + shift + {apostrophe,backslash}
  bspc config -d focused border_width {0,2}

# skippy last window
shift + space
  skippy-xd-runner --activate {--prev,--next} && skippy-xd-runner --toggle

# skippy alt-tab
{alt + ~Tab, XF86WWW}
  skippy-xd-runner {--activate --next, --toggle}


# focus the last node/desktop
super + {Tab,grave}
	bspc {node,desktop} -f last

# swap the last node/desktop
super + shift + {Tab,grave}
	bspc {node,desktop} -s last

# swap the last node/desktop
super + space
	bspc node -f {last}.local.!hidden.window && \
	bspc node -s last
	# bspc node -s {last}.local.!hidden.window

# focus the older or newer node in the focus history
super + {o,i}
	bspc wm -h off; \
	bspc node {older,newer} -f; \
	bspc wm -h on

# focus or send to the given desktop
super + {_,shift + }{1-9,0,minus,equal}
	bspc {desktop -f,node -d} '^{1-9,10,11,12}'

# rotate focused tree CCW/CW
super + {_,shift +}r
	bspc node @focused:/ -C {forward,backward}

# Rotate the current nodes parent
super + control + {Right, Left}
	bspc node @parent --rotate {90,270}

# rotate the current node focused
super + control + {Up, Down}
	bspc node @focused:/ -R {90,270}

#
# preselect
#

# preselect the direction
super + ctrl + {h,j,k,l}
	bspc node -p {west,south,north,east}

# preselect the ratio
super + ctrl + {1-9}
	bspc node -o 0.{1-9}

# cancel the preselection for the focused node
super + ctrl + space
	bspc node -p cancel

# cancel the preselection for the focused desktop
super + ctrl + shift + space
	bspc query -N -d | xargs -I id -n 1 bspc node id -p cancel

#
# move/resize
#

# # expand a window by moving one of its side outward
# super + alt + {m,comma,period,slash}
#   bspc node -z {left -20 0,bottom 0 20,top 0 -20,right 20 0}
#
# # contract a window by moving one of its side inward
# super + alt + shift + {m,comma,period,slash}
#   bspc node -z {right -20 0,top 0 20,bottom 0 -20,left 20 0}

# balance desktop's nodes
super + v
  bspc node @/ -B

# increase/decrease window size (zoom in/out)
super + alt + {i,o}
	{ \
	  xdotool getactivewindow windowmove --relative -- -50 -25 ; xdo resize -w +100 -h +50; \
	, xdotool getactivewindow windowmove --relative -- +50 +25 ; xdo resize -w -100 -h -50; \
	}

# hover window to left/down/up/right
super + alt + shift + {u,i,o,p}
  { x=0;   y=0;   w=681;  h=764; \
  , x=0;   y=382; w=1362; h=382; \
  , x=0;   y=0;   w=1362; h=382; \
  , x=681; y=0;   w=681;  h=764; \
  } \
  xdo move -x $x -y $y; xdo resize -w $w -h $h

# move floating window by 10px
super + alt + {h,j,k,l}
	bspc node -v {-10 0,0 10,0 -10,10 0}

# hover window to corner
super + alt + shift + {h,j,k,l}
  hover {left,down,up,right}

# xdo resize (small/medium)
super + alt + {_,shift + } n
  xdo resize {-w 800 -h 600, -w 681 -h 382}

# xdo fixedscreen 1366x768 (fullscreen no visible borders)
super + ctrl + {_,shift + } n
  xdo move -x 0 -y 0; xdo move {-x -1 -y -1, -x -2 -y -2}; xdo resize -w 1366 -h 768

# xdo fixedscreen 1366x768 (min-max window)
super + {_,shift + }n
  { x=250; y=18;  w=1112; h=746; \
  , x=0;   y=0;   w=1362; h=764; \
  } \
  xdo move -x $x -y $y; xdo resize -w $w -h $h

#
# status bar
#

# toggle polybar
# super + shift + space
#   ( pgrep polybar && killall polybar && bspc config top_padding 0 ) || \
#   ( $HOME/.config/polybar/launch.sh && sleep 0.5 && bspc config top_padding 18 );

# toggle polybar
super + shift + space
	polybar-msg cmd toggle; bspc config top_padding {0,18}

#
# receptacles
#

# Move new node to receptacle automatically
super + {_,shift +}y
  { $HOME/.config/bspwm/bspsubscribe, killall bspsubscribe }

# Close all receptacle
super + shift + o
  for win in `bspc query -N -n .leaf.\!window`; do bspc node $win -k ; done;

# Insert receptacle
super + shift + i; {h,j,k,l}
  bspc node --presel-dir {west,south,north,east} -i

# Move to receptacle
super + shift + u
	ID=$(bspc query -N -n) \
	bspc node $ID -n $(bspc query -N -n .leaf.\!window)

#
# sxhkd wiki
#

# resize west,south,north,east by 0-9 percentage range
super + alt + control + {h,j,k,l} ; {0-9}
	bspc node @{west,south,north,east} -r 0.{0-9}

# toggle focus_follows_pointer
super + alt + control + p
	bspc config focus_follows_pointer {true,false}

# Smart resize, will grow or shrink depending on location.
# Will always grow for floating nodes.
super + {Left,Down,Up,Right}
  n=40; \
  { d1=left;   d2=right;  dx=-$n; dy=0;   \
  , d1=bottom; d2=top;    dx=0;   dy=$n;  \
  , d1=top;    d2=bottom; dx=0;   dy=-$n; \
  , d1=right;  d2=left;   dx=$n;  dy=0;   \
  } \
  bspc node --resize $d1 $dx $dy || bspc node --resize $d2 $dx $dy

# Smart resize, will grow or shrink depending on location.
# Will always shrink for floating nodes.
super + shift + {Left,Down,Up,Right}
  n=40; \
  { d1=left;   d2=right;  dx=-$n; dy=0;   \
  , d1=bottom; d2=top;    dx=0;   dy=$n;  \
  , d1=top;    d2=bottom; dx=0;   dy=-$n; \
  , d1=right;  d2=left;   dx=$n;  dy=0;   \
  } \
  bspc node --resize $d2 $dx $dy || bspc node --resize $d1 $dx $dy


########################################
###      alphabetic_hotkeys          ###
#######################################

# signs
#F{1,2,3,4,5,6,7,8,9,10}
#	xdotool key {exclam,at,numbersign,dollar,percent,asciicircum,ampersand,asterisk,parenleft,parenright}

# super/alt click
{XF86Finance,XF86Game}
  xdotool click {1,2}

# super volume
super + XF86Audio{Raise,Lower}Volume
  pactl set-sink-volume @DEFAULT_SINK@ {+,-}5%

# volume
XF86Audio{Raise,Lower}Volume
  pactl set-sink-volume @DEFAULT_SINK@ {+,-}2%

# (un)mute audio
XF86AudioMute
  pactl set-sink-mute @DEFAULT_SINK@ toggle

# (un)mute mic
XF86AudioMicMute
  pactl set-source-mute @DEFAULT_SOURCE@ toggle

# backlight
XF86MonBrightness{Down,Up}
  light -{U,A} .11

# super backlight
super + XF86MonBrightness{Down,Up}
  light -{U,A} 2

# dimmer
shift + XF86MonBrightness{Down,Up}
  xcalib {-co 75 -a,-c}

# dmenu(u)mount
super + {F11,F12}
  {dmenumount,dmenuumount}

# chromium next-toggle-prev
super + KP_{Right,Begin,Left}
  playerctl --player=chromium {next,play-pause,previous}

# chromium play-pause
XF86Launch{1,4}
  playerctl --player=chromium play-pause

# chromium rewind-forward
XF86Launch{2,3}
	playerctl --player=chromium position {5-,5+}
  # YTID="$(wmctrl -l | awk '/YouTube/ \{print $1\}' | awk 'NR==1')"; \
  # CUID="$(xdo id)"; \
  # xdo activate $YTID && sleep 0.2 && xdotool key --clearmodifiers {w,e} && xdo activate $CUID

# chromium play-paus,rewind
XF86Shop
  playerctl --player=chromium play-pause

# mpv next-toggle-prev
mod1 + KP_{Right,Begin,Left}
  playerctl --player=mpv {next,play-pause,previous}

# mpv vol (down,up)
mod1 + KP_{Down,Up}
	{ \
	  playerctl --player=mpv volume 0.1-; \
	, [[ "$(playerctl -p mpv volume)" < 1 ]]&& playerctl --player=mpv volume 0.1+; \
	}

# spotify next-toggle-prev
ctrl + KP_{Right,Begin,Left}
  playerctl --player=spotify {next,play-pause,previous}

# spotify vol (down/up)
ctrl + KP_{Down,Up}
	{ \
		playerctl --player=spotify volume 0.1-; \
	, [[ "$(playerctl -p spotify volume)" < 1 ]]&& playerctl --player=spotify volume 0.1+; \
	}

# mpc next-toggle-prev-vol
KP_{Right,Begin,Left,Down,Up}
  mpc --port=6601 {next,toggle,prev,volume -2,volume +2}

# mpc next-toggle-prev
mod1 + XF86Audio{RaiseVolume,Mute,LowerVolume}
  mpc --port=6601 {next,toggle,prev}

# screenshot (fullscreen,_)
{super,alt} + Print
	maimpick {fullscreen,_}

# redshift
mod1 + ctrl + {1,2,3,4,5}
  redshift {-x, -O 2222, -O 3333, -O 4444, -O 5555}

# compositor start/end
super + BackSpace
	{\
		picom --glx-no-rebind-pixmap \
        --use-damage \
        --xrender-sync-fence \
        --backend glx \
        --experimental-backends \
        --transparent-clipping \
        # --active-opacity=0.90 \
        # --inactive-opacity=0.90 \
        # --refresh-rate 30\
				,\
    killall picom\
	}

# compositor keep background
super + ctrl + BackSpace
	{picom,killall picom}

# compositor decrease/increase transparency
super + ctrl + {minus,equal}
  xdo id -d -c | xargs -I id -n 1 picom-trans -w id {-2,+4}
  # bspc query -N -d | xargs -I id -n 1 picom-trans -w id {-2,+4}
  # xdo pid $ID  		# xdotool getactivewindow getwindowpid
  # xdo id -p $PID  # xdotool getactivewindow

# TextToSpeech
super + {_,shift,ctrl} + Next
  {xclip -o | mimic, xsel -b | festival --tts, killall mimic festival}

# browser media
super + shift + b
  wezterm start ncmpcpp

# dmenu launcher
super + {_,shift +,ctrl +}d
	{ \
		dmenu_run; \
	, wezterm start $(dmenu_path | dmenu); \
  , source $HOME/.config/shell/aliasrc && \
		alias | dmenu -i -l 10 | awk -F'=' '\{print $2\}' | xargs -I_ wezterm start -- bash -c "_"; \
	}

# lf user/root
super + {_,shift +} e
	{LF_CD=true wezterm, sudo -i LF_CD=true LS_COLORS="" $TERMINAL}

# browser
super + {_,shift +} w
  { google-chrome-stable --process-per-site, killall chrome}
