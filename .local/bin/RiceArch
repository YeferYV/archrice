#!/bin/bash

#======================================== Docker run archrice ========================================#

# xhost +
# cd "$(git rev-parse --show-toplevel)"
# docker run -it \
#     --name archrice \
#     --ipc=host \
#     --volume=${PWD%/*}:/home/dtfls/docker-volume \
#     --volume=/run/user/1000/pipewire-0:/run/user/1000/pipewire-0 \
#     --volume=/tmp/.X11-unix:/tmp/.X11-unix \
#     archlinux:base-devel bash -uelic '
#       [ ! -e /home/drknss ] && cd /home/dtfls/docker-volume/archrice/.local/bin && ./ResetArch && ./RiceArch
#       chmod g+w /dev/pts/0
#       su - "drknss"
#     '

#============================================== Vagrant ==============================================#

# pacman -S polkit-gnome dnsmasq libvirt qemu virt-manager vagrant
# exec /usr/lib/polkit-gnome/polkit-gnome-authentication-agent-1 & disown
# systemctl start libvirtd
# vagrant plugin install vagrant-libvirt
# vagrant init archlinux/archlinux
# vagrant up
# vagrant ssh
# sudo passwd
# su - # `sudo -i` doesn't work with yay

#----------------------------------- Before-Chroot ( subvolumes ) ------------------------------------#

# mkdir                              /mnt/btrfsroot
# mount -o subvolid=5 /dev/vda3      /mnt/btrfsroot
# btrfs subvolume snapshot           /mnt/btrfsroot /mnt/btrfsroot/@
# btrfs subvolume set-default        /mnt/btrfsroot/@
# btrfs subvolume get-default        /mnt/btrfsroot/@
# btrfs subvolume create             /mnt/btrfsroot/@home
# btrfs subvolume create             /mnt/btrfsroot/@snapshots
# mkdir                              /mnt/btrfsroot/@/.snapshots
# echo "/dev/vda3    /              btrfs    rw,noatime,compress=lzo,subvol=/@              0 0" >> /mnt/btrfsroot/@/etc/fstab
# echo "/dev/vda3    /home          btrfs    rw,noatime,compress=lzo,subvol=/@home          0 0" >> /mnt/btrfsroot/@/etc/fstab
# echo "/dev/vda3    /.snapshots    btrfs    rw,noatime,compress=lzo,subvol=/@snapshots     0 0" >> /mnt/btrfsroot/@/etc/fstab
# # echo "/dev/vda2    /boot/efi      vfat     rw,relatime                                    0 2" >> /mnt/btrfsroot/@/etc/fstab
# rm -rf                             /mnt/btrfsroot/@/home/*
# mount -o subvol=@home /dev/vda3    /mnt/btrfsroot/@/home
# cp -r /home/*                      /mnt/btrfsroot/@/home
# chown vagrant:vagrant -R           /mnt/btrfsroot/@/home/vagrant

#------------------------------------ After-Chroot (   grub    ) -------------------------------------#

# pacman -S --noconfirm arch-install-scripts
# umount                             /mnt/btrfsroot/@/home
# umount                             /mnt/btrfsroot
# mount  /dev/vda3                   /mnt/btrfsroot
# arch-chroot                        /mnt/btrfsroot
# mkdir -p                           /boot/efi
# mount /dev/vda2                    /boot/efi
# grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=GRUB_ARCH
# grub-mkconfig -o /boot/grub/grub.cfg
# exit
# reboot
# su -
# mount -o subvolid=5 /dev/vda3      /mnt/btrfsroot
# find                               /mnt/btrfsroot -maxdepth 1 -not -name "*@*" -not -path "/mnt/btrfsroot" -not -path "/mnt/btrfsroot/boot" | xargs rm -r
# ls                                 /mnt/btrfsroot | grep -v @ | grep -v boot | xargs -I var rm -r /mnt/btrfsroot/var

#============================================= Arch ISO ==============================================#

# pacman -S polkit-gnome dnsmasq libvirt qemu virt-manager vagrant
# exec /usr/lib/polkit-gnome/polkit-gnome-authentication-agent-1 & disown
# systemctl start libvirtd
# curl -LO "https://geo.mirror.pkgbuild.com/iso/2023.09.01/archlinux-2023.09.01-x86_64.iso"
# virt-manager

#----------------------------------- Before-Chroot (partitioning) ------------------------------------#

# cfdisk
# mkfs.fat   /dev/vda2
# mkfs.btrfs /dev/vda3
# mount /dev/vda3 /mnt
# btrfs su cr /mnt/@
# btrfs su cr /mnt/@home
# btrfs su cr /mnt/@snapshots
# mount -o noatime,compress=lzo,subvol=@           /dev/vda3 /mnt
# mkdir -p /mnt/{boot/efi,home,.snapshots}
# mount -o noatime,compress=lzo,subvol=@home       /dev/vda3 /mnt/home
# mount -o noatime,compress=lzo,subvol=@snapshots  /dev/vda3 /mnt/.snapshots
# mount                                            /dev/vda2 /mnt/boot/efi
# pacstrap /mnt base base-devel broadcom-wl btrfs-progs efibootmgr git grub linux linux-firmware networkmanager snapper
# genfstab U /mnt >> /mnt/etc/fstab

#------------------------------------ After-Chroot (zram + grub) -------------------------------------#

# arch-chroot /mnt
# pacman -S --noconfirm zram-generator
# echo -e "[zram0]\n zram-size = ram / 4" >> /etc/systemd/zram-generator.conf
# systemctl daemon-reload
# systemctl start systemd-zram-setup@zram0.service

# grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=GRUB_ARCH
# grub-mkconfig -o /boot/grub/grub.cfg

#========================================== rollback layout ==========================================#

# ● home 》
# ○ snapper-rollback to "base-install"
# ○ snapper delete old snapshots
# ○ ./ResetArch
# ○ snapper -c home create -d "after-ResetArch(commit 319)"
# ○ ./RiceArch
# ○ check google-chrome
# ○ check vscode
# ○ check yay -Scc
# ○ check neovim plugins
# ○ check systemctl .services
# ○ snapper -c home create -d "after-RiceArch(commit 319)"
# ○ ./Rice
# ○ snapper -c home create -d "after-Rice(commit 117)"
# ○ ./larbs.sh
# ○ snapper -c home create -d "after-larbs(commit ???)"

# ● root 》
# ○ snapper-rollback to "base-install"
# ○ snapper delete old snapshots
# ○ delete btrfs snapshots created by snapper-rollback
# ○ ./ResetArch
# ○ snapper create -d "after-ResetArch(commit 319)"
# ○ ./RiceArch
# ○ check dataos
# ○ check sudoers
# ○ check snapper-rollback.conf
# ○ check zram
# ○ snapper create -d "after-RiceArch(commit 319)"
# ○ ./Rice
# ○ snapper create -d "after-Rice(commit 117)"
# ○ ./larbs.sh
# ○ snappet create -d "after-Larbs(commit???)"

#=========================================== After-Reboot ============================================#

# ARCH_USER=drknss BTRFS_SNAPSHOT=true RESETARCH_SNAPSHOT=true RICEARCH_SNAPSHOT=true ./RiceArch

# exit on error
set -eu

# Detect non-root user:
[ "$(id -u)" != 0 ] && printf "\e[1;31m Run it as root user, ARCH_USER will be added \e[0m\n" && exit 1

#------------------------------------------ Btrfs snapshot -------------------------------------------#

[ "${BTRFS_SNAPSHOT:-}" == true ] && {
  printf "\n\e[1;33m Btrfs snapshot (@ @home subvolumes required) \e[0m\n"

  pacman -S --noconfirm snapper
  umount /.snapshots
  rm -rf /.snapshots
  snapper --config root create-config /
  btrfs su delete /.snapshots
  mkdir /.snapshots
  mount --all # remount
  snapper --config home create-config /home
  snapper --config root create --description "base-install"
  snapper --config home create --description "base-install"
  btrfs su snapshot /          /.snapshots/backup-"$(date +%y-%m-%d)"-snapper-base-install
  btrfs su snapshot /home /home/.snapshots/backup-"$(date +%y-%m-%d)"-snapper-base-install

}

#---------------------------------------- ResetArch snapshot -----------------------------------------#

[ "${RESETARCH_SNAPSHOT:-}" == true ] && {
  printf "\n\e[1;33m ReseArch snapshot \e[0m\n"
  ./ResetArch
  snapper -c root create -d "after-ResetArch"
  snapper -c home create -d "after-ResetArch"
}

#----------------------------------------- AddUser + locales -----------------------------------------#

echo "$(tput -T ansi setaf 3) AddUser + locales $(tput -T ansi sgr0)"

USER=${ARCH_USER:-drknss}

# Add user:
install_user() {
  [ ! -e "/home/$USER" ] && useradd --shell /bin/zsh -mG audio,video,wheel,tty $USER
  sudo usermod --append --groups audio,video $USER
  echo root:toor  | chpasswd
  echo $USER:toor | chpasswd
  echo "%wheel ALL=(ALL:ALL) NOPASSWD: ALL"  > /etc/sudoers.d/wheel
}

install_locales(){
  # Locales:
  # timedatectl set-ntp true
  # hwclock --systohc
  ln -sf /usr/share/zoneinfo/US/Eastern /etc/localtime
  sed -i 's/#en_US.UTF-8/en_US.UTF-8/' /etc/locale.gen
  locale-gen
  # echo "LANG=en_US.UTF-8"                    > /etc/locale.conf
  echo "4rch"                                > /etc/hostname
  echo "127.0.0.1 localhost"                >> /etc/hosts
  # echo "::1       localhost"                >> /etc/hosts
  # echo "127.0.1.1 4rch.localdomain 4rch"    >> /etc/hosts
}

install_user    || ( echo $(tput -T ansi setaf 1) install_user failed    && exit 1; )
install_locales || ( echo $(tput -T ansi setaf 1) install_locales failed && exit 1; )

#----------------------------------------- Login User Configs ----------------------------------------#

printf "\n\e[1;33m Login User Configs \e[0m\n"

# sudo -u "drksl" -s -- bash -c "echo $USER" #==> root
# sudo -u "drksl" -s -- bash -c 'echo $USER' #==> drknss
sudo -u "$USER" -s -- <<'====' # with '====' or "====" makes USER=drknss, with just ==== makes USER=root
  set -eu

  install_dependencies(){
    [ -e /.dockerenv ] && yes | yay -S --noconfirm tmux
    yes | yay -S --noconfirm cht.sh-git zsh-fast-syntax-highlighting
  }

  install_dotfiles() {

    mkdir -p $HOME/.config/dotfiles
    cp -r ../../../archrice $HOME/.config/dotfiles
    cd $HOME/.config/dotfiles/archrice

    mkdir -p "$HOME"/.config
    mkdir -p "$HOME"/.local
    stow --restow --verbose --target="$HOME"/.config .config
    stow --restow --verbose --target="$HOME"/.local  .local
    ln -sf "$HOME"/.config/shell/.zprofile "$HOME"/.zprofile
    ln -sf "$HOME"/.config/shell/.xinitrc  "$HOME"/.xinitrc

  }

  install_fonts() {
    mkdir -p "$HOME"/.local/share/fonts

    # Nerd-Fonts:
    git clone --depth=1 --filter=blob:none --sparse https://github.com/ryanoasis/nerd-fonts /tmp/nerd-fonts
    cd /tmp/nerd-fonts
    git sparse-checkout add patched-fonts/3270
    git sparse-checkout add patched-fonts/CascadiaCode
    git sparse-checkout add patched-fonts/FiraCode
    git sparse-checkout add patched-fonts/Terminus
    cp -r patched-fonts/3270         "$HOME"/.local/share/fonts
    cp -r patched-fonts/CascadiaCode "$HOME"/.local/share/fonts
    cp -r patched-fonts/FiraCode     "$HOME"/.local/share/fonts
    cp -r patched-fonts/Terminus     "$HOME"/.local/share/fonts
    cd .. && rm -rf /tmp/nerd-fonts

    # Font-Awesome:
    git clone --depth=1 --filter=blob:none --sparse https://github.com/FortAwesome/Font-Awesome /tmp/Font-Awesome
    cd /tmp/Font-Awesome
    git sparse-checkout add otfs
    git sparse-checkout add webfonts
    mkdir           "$HOME"/.local/share/fonts/Font-Awesome
    cp -r otfs/     "$HOME"/.local/share/fonts/Font-Awesome
    cp -r webfonts/ "$HOME"/.local/share/fonts/Font-Awesome

    # Noto Sans/Serif/Mono:
    git clone --depth=1 --filter=blob:none --sparse https://github.com/notofonts/notofonts.github.io /tmp/notofonts.github.io
    cd /tmp/notofonts.github.io
    git sparse-checkout add fonts/NotoSans/googlefonts
    git sparse-checkout add fonts/NotoSansMono/googlefonts
    git sparse-checkout add fonts/NotoSerif/googlefonts
    mkdir                                "$HOME"/.local/share/fonts/NotoSans
    mkdir                                "$HOME"/.local/share/fonts/NotoSansMono
    mkdir                                "$HOME"/.local/share/fonts/NotoSerif
    cp -r fonts/NotoSans/googlefonts     "$HOME"/.local/share/fonts/NotoSans
    cp -r fonts/NotoSansMono/googlefonts "$HOME"/.local/share/fonts/NotoSansMono
    cp -r fonts/NotoSerif/googlefonts    "$HOME"/.local/share/fonts/NotoSerif

    # Noto CJK:
    # git clone --depth=1 --filter=blob:none --sparse https://github.com/notofonts/noto-cjk /tmp/noto-cjk
    # cd /tmp/noto-cjk
    # git sparse-checkout add google-fonts
    # mkdir              $HOME/.local/share/fonts/NotoCJK
    # cp -r google-fonts $HOME/.local/share/fonts/NotoCJK

    # Noto Color-Emoji:
    git clone --depth=1 --filter=blob:none --sparse https://github.com/googlefonts/noto-emoji /tmp/noto-emoji
    cd /tmp/noto-emoji
    git sparse-checkout add fonts
    mkdir                       "$HOME"/.local/share/fonts/Noto-Emoji
    cp fonts/NotoColorEmoji.ttf "$HOME"/.local/share/fonts/Noto-Emoji

    # Bedstead Font:
    curl -L https://bjh21.me.uk/bedstead/bedstead-002.004.zip --output /tmp/bedstead-002.004.zip
    unzip /tmp/bedstead-002.004.zip -d "$HOME"/.local/share/fonts/
  }

  install_configs (){

    # sudo systemctl enable NetworkManager
    # sudo systemctl enable cronie
    # systemctl --user enable mpd
    # systemctl --user enable pipewire
    # systemctl --user enable touchcursor
    # mpc --port=6601 update

    cp       "$HOME"/.config/wallhaven-2ye15g.jpg  "$HOME"/.local/share/bg
    mkdir -p "$HOME"/.local/share/mpd              "$HOME"/.cache/zsh
    [ -e /etc/X11/xorg.conf.d ] && sudo mv /etc/X11/xorg.conf.d /etc/X11/xorg.conf.d.synapticsconflicts
    sudo mkdir -p /etc/X11/xorg.conf.d && sudo cp  "$HOME"/.config/shell/10-synaptics.conf /etc/X11/xorg.conf.d
    if [ -e /bin/crontab ]; then          crontab  "$HOME"/.local/bin/cron/lowbatnotificationcron; fi

  }

  # Main:
  install_dependencies                          || ( echo "$(tput -T ansi setaf 1) install_dependencies failed"  && exit 1)
  install_dotfiles                              || ( echo "$(tput -T ansi setaf 1) install_dotfiles failed"      && exit 1)
  if [ ! -e /.dockerenv ]; then install_fonts   || ( echo "$(tput -T ansi setaf 1) install_nerdfonts failed"     && exit 1); fi
  if [ ! -e /.dockerenv ]; then install_configs || ( echo "$(tput -T ansi setaf 1) install_configs failed"       && exit 1); fi
====

#----------------------------------------- RiceArch snapshot -----------------------------------------#

[ "${RICEARCH_SNAPSHOT:-}" == true ] && {
  printf "\n\e[1;33m RiceArch snapshot \e[0m\n"
  snapper -c root create -d "after-RiceArch"
  snapper -c home create -d "after-RiceArch"
}

printf "\e[1;32mDone!\e[0m\n"
