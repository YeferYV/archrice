#!/bin/bash

#======================= Usage Example =======================#

# pacman -S polkit-gnome libvirt qemu virt-manager vagrant
# exec /usr/lib/polkit-gnome/polkit-gnome-authentication-agent-1 & disown
# systemctl start libvirtd
# vagrant plugin install vagrant-libvirt
# vagrant init archlinux/archlinux
# vagrant up
# vagrant ssh
# export SDX2=vda2
# ARCH_USER=drknss BTRFS_SNAPSHOT=true RESETARCH_SNAPSHOT=true RICEARCH_SNAPSHOT=true ./RiceArch

#=============== Before-Chroot (partitioning) ================#

# cfdisk
# mkfs.fat /dev/$SDX1
# mkfs.btrfs /dev/$SDX2
# mount /dev/$SDX2 /mnt
# btrfs su cr /mnt/@
# btrfs su cr /mnt/@home
# btrfs su cr /mnt/@swap
# btrfs su cr /mnt/@.snapshots
# mount -o noatime,compress=lzo,subvol=@ /dev/$SDX2 /mnt
# mkdir -p /mnt/{boot/efi,home,swap,.snapshots}
# mount -o noatime,compress=lzo,subvol=@home /dev/$SDX2 /mnt/home
# mount -o noatime,compress=lzo,subvol=@.snapshots /dev/$SDX2 /mnt/.snapshots
# mount -o nodatacow,subvol=@swap /dev/$SDX2 /mnt/swap
# mount /dev/$SDX2 /mnt/boot/efi
# pacstrap /mnt base base-devel broadcom-wl btrfs-progs efibootmgr grub linux linux-firmware neovim networkmanager snapper git cronie
# genfstab U /mnt >> /mnt/etc/fstab
# sed -i "s/MODULE=()/MODULE=(btrfs)/" /etc/mkinitcpio.conf
# mkinitcpio -p linux

#==================== After-Chroot (swap) ====================#

# arch-chroot /mnt
# truncate -s 0 /swap/swapfile
# chattr +C /swap/swapfile
# btrfs property set /swap/swapfile compression none
# dd if=/dev/zero of=/swap/swapfile bs=1G count=8 status=progress
# chmod 600 /swap/swapfile
# mkswap /swap/swapfile
# swapon /swap/swapfile
# echo "/swap/swapfile none defaults 0 0" >> /etc/fstab

#================== After-Reboot (configs) ===================#

printf "\e[1;33m After-Reboot (configs) \e[0m\n"
USER=${ARCH_USER:-drknss}
set -eu
sudo -s -- <<===
  set -eu
  timedatectl set-ntp true
  hwclock --systohc
  ln -sf /usr/share/zoneinfo/US/Eastern /etc/localtime
  sed -i '177s/#//' /etc/locale.gen
  locale-gen
  echo "LANG=en_US.UTF-8"                    > /etc/locale.conf
  echo "4rch"                                > /etc/hostname
  echo "127.0.0.1 localhost"                >> /etc/hosts
  echo "::1       localhost"                >> /etc/hosts
  echo "127.0.1.1 4rch.localdomain 4rch"    >> /etc/hosts
  useradd -mG video,wheel $USER
  echo root:toor | chpasswd
  echo $USER:toor | chpasswd
  echo "%wheel ALL=(ALL:ALL) NOPASSWD: ALL"  > /etc/sudoers.d/wheel
===

#====================== Btrfs snapshot ======================#

[ "${BTRFS_SNAPSHOT:-}" == true ] && {
  [ $(id -u) != 0 ] && echo "\e[1;33mRun it as root user at root's folder\e[0m\n" >&2 && exit 1
  printf "\n\e[1;33m Btrfs snapshot \e[0m\n"
  pacman -Syu --noconfirm btrfs-progs snapper
  mkdir /mnt/@
  mount -o subvolid=5 /dev/${SDX2:-vda2} /mnt/@
  # mv /mnt/@root /mnt/@
  btrfs su get-default /mnt/@
  btrfs su set-default /mnt/@
  mv /home /home.bak
  btrfs su cr /home
  mv /home.bak/* /home
  rm -rf /.snapshots /home.bak
  snapper -c root create-config /
  snapper -c home create-config /home
  snapper -c root create -d "base-install"
  snapper -c home create -d "base-install"
  btrfs su snapshot / /.snapshots/backup-$(date +%y-%m-%d)-snapper-base-install
  btrfs su snapshot /home /home/.snapshots/backup-$(date +%y-%m-%d)-snapper-base-install
}

#==================== ResetArch snapshot =====================#

[ "${RESETARCH_SNAPSHOT:-}" == true ] && {
  printf "\n\e[1;33m ReseArch snapshot \e[0m\n"
  sudo -u $USER -s -- ./ResetArch
  sudo snapper -c root create -d "after-ResetArch"
  sudo snapper -c home create -d "after-ResetArch"
}

#================== Post-Install (dotfiles) ==================#

printf "\n\e[1;33m Post-Install (dotfiles) \e[0m\n"
sudo -u $USER -s -- <<===
  set -eu
  [ ! -e /home/$USER/.config ] && mkdir -p /home/$USER/.config
  [ ! -e /home/$USER/.local ] && mkdir -p /home/$USER/.local
  sudo mkdir -p /home/dtfls/yydtfls
  # git clone --depth=1 https://gitlab.com/yucrayeff36/dotfiles /home/dtfls/yydtfls/dotfiles
  sudo cp -r ../../../dotfiles /home/dtfls/yydtfls/dotfiles
  sudo chown -R $USER:$USER /home/dtfls
  cd /home/dtfls/yydtfls/dotfiles
  stow --restow --verbose --target=/home/$USER/.config .config
  stow --restow --verbose --target=/home/$USER/.local .local
  mkdir -p /home/$USER/.local/share/mpd
  # systemctl --user enable mpd
  # systemctl --user enable pulseaudio-x11
  # systemctl --user enable touchcursor
  # mpc --port=6601 update
  ln -s /home/$USER/.config/shell/profile /home/$USER/.zprofile
  ln -s /home/$USER/.config/x11/.xinitrc /home/$USER/.xinitrc
  sudo cp /home/$USER/.config/x11/10-synaptics.conf /etc/X11/xorg.conf.d/
  sudo cp /home/$USER/.config/wallhaven-4lokdp.jpg /home/$USER/.local/share/bg
  sudo chsh --shell /usr/bin/zsh $USER
  crontab /home/$USER/.local/bin/cron/lowbatnotificationcron

  # 3270 font
  mkdir -p ~/.local/share/fonts/3270-github
  curl -LO https://github.com/rbanffy/3270font/releases/download/v3.0.0/3270_fonts_32ca849.zip
  unzip 3270_fonts_32ca849.zip -d ~/.local/share/fonts/3270-github

  # sudo grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=GRUB
  # sudo grub-mkconfig -o /boot/grub/grub.cfg
  sudo systemctl enable NetworkManager
  sudo systemctl enable cronie

  # neovim plugins
  set +eu # disable exit on error (spoiler nvim still outputs errors)
  git clone --depth 1 https://github.com/wbthomason/packer.nvim ~/.local/share/nvim/site/pack/packer/start/packer.nvim
  ( nvim -u ~/.config/nvim/lua/user/plugins.lua --headless -c "autocmd User PackerComplete quitall" -c "PackerSync" )
===

#===================== RiceArch snapshot =====================#

[ "${RICEARCH_SNAPSHOT:-}" == true ] && {
  printf "\n\e[1;33m RiceArch snapshot \e[0m\n"
  sudo snapper -c root create -d "after-RiceArch"
  sudo snapper -c home create -d "after-RiceArch"
}

printf "\e[1;32mDone!\e[0m\n"
