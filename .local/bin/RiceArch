#!/bin/bash

#==================== Docker run archrice ====================#

# cd "$(git rev-parse --show-toplevel)"
# docker run -it \
#            --name archrice \
#            --privileged \
#            --volume=${PWD%/*}:/home/dtfls/dotfiles-docker-volume \
#            --volume=/run/user/1000/pulse/native:/run/user/1000/pulse/native \
#            --volume=/tmp/.X11-unix:/tmp/.X11-unix \
#            archlinux:base-devel \
#            bash -uelic '
#              if [ ! -e /home/drknss ]; then
#                tty >> /tmp/sixel-
#                cd /home/dtfls/dotfiles-docker-volume/dotfiles/.local/bin
#                RESETARCH_SNAPSHOT=true ./RiceArch
#                mkdir -p /run/user/1000/pulse
#                chown -R drknss:drknss /run/user/1000
#                yes | pacman -S pulseaudio
#              else
#                reset
#              fi
#              chmod g+w /dev/pts/0
#              stty rows $(tput lines) && stty cols $(tput cols) && stty sane
#              su - "drknss" bash -c "export XDG_RUNTIME_DIR=/run/user/1000 && script -qI /dev/null"
#            '

#======================= Vagrant build =======================#

# pacman -S polkit-gnome libvirt qemu virt-manager vagrant
# exec /usr/lib/polkit-gnome/polkit-gnome-authentication-agent-1 & disown
# systemctl start libvirtd
# vagrant plugin install vagrant-libvirt
# vagrant init archlinux/archlinux
# vagrant up
# vagrant ssh
# export SDX2=vda2
# ARCH_USER=drknss BTRFS_SNAPSHOT=true RESETARCH_SNAPSHOT=true RICEARCH_SNAPSHOT=true ./RiceArch

#=============== Before-Chroot (partitioning) ================#

# cfdisk
# mkfs.fat /dev/$SDX1
# mkfs.btrfs /dev/$SDX2
# mount /dev/$SDX2 /mnt
# btrfs su cr /mnt/@
# btrfs su cr /mnt/@home
# btrfs su cr /mnt/@swap
# btrfs su cr /mnt/@.snapshots
# mount -o noatime,compress=lzo,subvol=@ /dev/$SDX2 /mnt
# mkdir -p /mnt/{boot/efi,home,swap,.snapshots}
# mount -o noatime,compress=lzo,subvol=@home /dev/$SDX2 /mnt/home
# mount -o noatime,compress=lzo,subvol=@.snapshots /dev/$SDX2 /mnt/.snapshots
# mount -o nodatacow,subvol=@swap /dev/$SDX2 /mnt/swap
# mount /dev/$SDX2 /mnt/boot/efi
# pacstrap /mnt base base-devel broadcom-wl btrfs-progs efibootmgr grub linux linux-firmware neovim networkmanager snapper git cronie
# genfstab U /mnt >> /mnt/etc/fstab
# sed -i "s/MODULE=()/MODULE=(btrfs)/" /etc/mkinitcpio.conf
# mkinitcpio -p linux

#==================== After-Chroot (swap) ====================#

# arch-chroot /mnt
# truncate -s 0 /swap/swapfile
# chattr +C /swap/swapfile
# btrfs property set /swap/swapfile compression none
# dd if=/dev/zero of=/swap/swapfile bs=1G count=8 status=progress
# chmod 600 /swap/swapfile
# mkswap /swap/swapfile
# swapon /swap/swapfile
# echo "/swap/swapfile none defaults 0 0" >> /etc/fstab

#================== After-Reboot (configs) ===================#

printf "\e[1;33m After-Reboot (configs) \e[0m\n"
USER=${ARCH_USER:-drknss}
set -eu
sudo -s -- <<===
  set -eu
  # timedatectl set-ntp true
  # hwclock --systohc
  ln -sf /usr/share/zoneinfo/US/Eastern /etc/localtime
  sed -i 's/#en_US.UTF-8/en_US.UTF-8/' /etc/locale.gen
  locale-gen
  echo "LANG=en_US.UTF-8"                    > /etc/locale.conf
  echo "4rch"                                > /etc/hostname
  # echo "127.0.0.1 localhost"                >> /etc/hosts
  # echo "::1       localhost"                >> /etc/hosts
  # echo "127.0.1.1 4rch.localdomain 4rch"    >> /etc/hosts
  [ ! -e /home/$USER ] && useradd -mG video,wheel,tty $USER
  echo root:toor | chpasswd
  echo $USER:toor | chpasswd
  echo "%wheel ALL=(ALL:ALL) NOPASSWD: ALL"  > /etc/sudoers.d/wheel
===

#======================= Btrfs snapshot ======================#

[ "${BTRFS_SNAPSHOT:-}" == true ] && {
  [ "$(id -u)" != 0 ] && echo "\e[1;33mRun it as root user at root's folder\e[0m\n" >&2 && exit 1
  printf "\n\e[1;33m Btrfs snapshot \e[0m\n"
  pacman -Syu --noconfirm btrfs-progs snapper
  mkdir /mnt/@
  mount -o subvolid=5 /dev/"${SDX2:-vda2}" /mnt/@
  # mv /mnt/@root /mnt/@
  btrfs su get-default /mnt/@
  btrfs su set-default /mnt/@
  mv /home /home.bak
  btrfs su cr /home
  mv /home.bak/* /home
  rm -rf /.snapshots /home.bak
  snapper -c root create-config /
  snapper -c home create-config /home
  snapper -c root create -d "base-install"
  snapper -c home create -d "base-install"
  btrfs su snapshot / /.snapshots/backup-"$(date +%y-%m-%d)"-snapper-base-install
  btrfs su snapshot /home /home/.snapshots/backup-"$(date +%y-%m-%d)"-snapper-base-install
}

#==================== ResetArch snapshot =====================#

[ "${RESETARCH_SNAPSHOT:-}" == true ] && {
  printf "\n\e[1;33m ReseArch snapshot \e[0m\n"
  sudo -u "$USER" -s -- ./ResetArch
  # sudo snapper -c root create -d "after-ResetArch"
  # sudo snapper -c home create -d "after-ResetArch"
}

#================== Post-Install (dotfiles) ==================#

printf "\n\e[1;33m Post-Install (dotfiles) \e[0m\n"
sudo -u "$USER" -s -- <<===
  set -eu

  # Dotfiles:
  install_dotfiles() {
    [ ! -e /home/$USER/.config ] && mkdir -p /home/$USER/.config
    [ ! -e /home/$USER/.local ] && mkdir -p /home/$USER/.local
    sudo mkdir -p /home/dtfls/yydtfls
    # git clone --depth=1 https://gitlab.com/yucrayeff36/dotfiles /home/dtfls/yydtfls/dotfiles
    sudo cp -r ../../../dotfiles /home/dtfls/yydtfls/dotfiles
    sudo chown -R $USER:$USER /home/dtfls
    cd /home/dtfls/yydtfls/dotfiles
    stow --restow --verbose --target=/home/$USER/.config .config
    stow --restow --verbose --target=/home/$USER/.local .local
    ln -s /home/$USER/.config/shell/profile /home/$USER/.zprofile
    ln -s /home/$USER/.config/x11/.xinitrc /home/$USER/.xinitrc
  }

  # Install Fonts:
  install_fonts() {
    [ ! -e /home/$USER/.local/share/fonts ] && mkdir -p /home/$USER/.local/share/fonts

    # Nerd-Fonts:
    git clone --depth=1 --branch=v2.3.3 --filter=blob:none --sparse https://github.com/ryanoasis/nerd-fonts
    cd nerd-fonts
    git sparse-checkout add patched-fonts/3270
    git sparse-checkout add patched-fonts/CascadiaCode
    git sparse-checkout add patched-fonts/FiraCode
    git sparse-checkout add patched-fonts/Terminus
    cp -r patched-fonts/3270 /home/$USER/.local/share/fonts/
    cp -r patched-fonts/CascadiaCode /home/$USER/.local/share/fonts/
    cp -r patched-fonts/FiraCode /home/$USER/.local/share/fonts/
    cp -r patched-fonts/Terminus /home/$USER/.local/share/fonts/
    cd ..

    # Font-Awesome:
    git clone --depth=1 --filter=blob:none --sparse https://github.com/FortAwesome/Font-Awesome
    cd Font-Awesome
    git sparse-checkout add otfs
    git sparse-checkout add webfonts
    mkdir /home/$USER/.local/share/fonts/Font-Awesome
    cp -r otfs/ /home/$USER/.local/share/fonts/Font-Awesome/
    cp -r webfonts/ /home/$USER/.local/share/fonts/Font-Awesome/
    cd ..

    # Noto Sans/Serif/Mono:
    git clone --depth=1 --filter=blob:none --sparse https://github.com/notofonts/notofonts.github.io
    cd notofonts.github.io
    git sparse-checkout add fonts/NotoSans/googlefonts
    git sparse-checkout add fonts/NotoSansMono/googlefonts
    git sparse-checkout add fonts/NotoSerif/googlefonts
    mkdir /home/$USER/.local/share/fonts/NotoSans
    mkdir /home/$USER/.local/share/fonts/NotoSansMono
    mkdir /home/$USER/.local/share/fonts/NotoSerif
    cp -r fonts/NotoSans/googlefonts /home/$USER/.local/share/fonts/NotoSans/
    cp -r fonts/NotoSansMono/googlefonts /home/$USER/.local/share/fonts/NotoSansMono/
    cp -r fonts/NotoSerif/googlefonts /home/$USER/.local/share/fonts/NotoSerif/
    cd ..

    # Noto CJK:
    git clone --depth=1 --filter=blob:none --sparse https://github.com/notofonts/noto-cjk
    cd noto-cjk
    git sparse-checkout add google-fonts
    mkdir /home/$USER/.local/share/fonts/NotoCJK
    cp -r google-fonts /home/$USER/.local/share/fonts/NotoCJK/
    cd ..

    # Noto Color-Emoji:
    git clone --depth=1 --filter=blob:none --sparse https://github.com/googlefonts/noto-emoji
    cd noto-emoji
    git sparse-checkout add fonts
    mkdir /home/$USER/.local/share/fonts/Noto-Emoji
    cp fonts/NotoColorEmoji.ttf /home/$USER/.local/share/fonts/Noto-Emoji/
    cd ..

    # Bedstead Font:
    curl -LO https://bjh21.me.uk/bedstead/bedstead-002.004.zip
    unzip bedstead-002.004.zip -d /home/$USER/.local/share/fonts/
  }

  # install_root_configs (){
  #   sudo grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=GRUB
  #   sudo grub-mkconfig -o /boot/grub/grub.cfg
  #   sudo systemctl enable NetworkManager
  #   sudo systemctl enable cronie
  # }

  # User Configs:
  install_configs (){
    mkdir -p /home/$USER/.local/share/mpd
    # systemctl --user enable mpd
    # systemctl --user enable pulseaudio-x11
    # systemctl --user enable touchcursor
    # mpc --port=6601 update
    [ ! -e /etc/X11/xorg.conf.d/ ] && sudo mkdir -p /etc/X11/xorg.conf.d/
    sudo cp /home/$USER/.config/x11/10-synaptics.conf /etc/X11/xorg.conf.d/
    sudo cp /home/$USER/.config/wallhaven-4lokdp.jpg /home/$USER/.local/share/bg
    sudo chsh --shell /usr/bin/zsh $USER
    [ -x "$(command -v crontab)" ] && crontab /home/$USER/.local/bin/cron/lowbatnotificationcron
    rm -rf {nerd-fonts,Font-Awesome,notofonts.github.io,noto-emoji,bedstead-002.004.zip}
  }


  # Neovim Plugins:
  install_neovim_plugins() {
    set +eu # disable exit on error (spoiler nvim still outputs errors)
    ( APPIMAGE_EXTRACT_AND_RUN=1 nvim --headless "+Lazy! sync" +qa )
  }

  # Main:
  install_dotfiles        || echo "$(tput -T ansi setaf 1) install_dotfiles failed"
  install_fonts           || echo "$(tput -T ansi setaf 1) install_nerdfonts failed"
  install_configs         || echo "$(tput -T ansi setaf 1) install_configs failed"
  install_neovim_plugins  || echo "$(tput -T ansi setaf 1) install_neovim_plugins failed"
===

#===================== RiceArch snapshot =====================#

[ "${RICEARCH_SNAPSHOT:-}" == true ] && {
  printf "\n\e[1;33m RiceArch snapshot \e[0m\n"
  sudo snapper -c root create -d "after-RiceArch"
  sudo snapper -c home create -d "after-RiceArch"
}

printf "\e[1;32mDone!\e[0m\n"
