" use python3
if exists('py2') && has('python')
elseif has('python3')
endif

" Vundle -----------------------------------------------------------------------
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'
Plugin 'scrooloose/nerdtree.git'
Plugin 'davidhalter/jedi-vim'
Plugin 'xavierd/clang_complete'
Plugin 'flazz/vim-colorschemes'
Plugin 'jpalardy/vim-slime'
Plugin 'tpope/vim-commentary'
Plugin 'ryanoasis/vim-devicons'

call vundle#end()            " required
" Vundle -----------------------------------------------------------------------

" file type and syntax highliting on
filetype plugin indent on
syntax on

" whitespaces
autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red
highlight ExtraWhitespace ctermbg=cyan guibg=cyan
autocmd InsertLeave * redraw!
match ExtraWhitespace /\s\+$\| \+\ze\t/
autocmd BufWritePre * :%s/\s\+$//e

"" color scheme
color leetsmyck
"color colors-wal

" sessions
noremap <F1> :mksession! .vim.session <cr>
noremap <F2> :source .vim.session <cr>
noremap <F3> :! rm .vim.session <cr>

" for autoread to auto load
au FocusGained,BufEnter * :silent! !
au FocusLost,WinLeave * :silent! w

" specific settings
"set nocompatible         " don't reset to vi-compatible(which is off if vimrc exit)'
set noshowmode            " show the insert, normal or visual mode(which is on by default)
set cmdheight=2           " More space for displaying messages
set numberwidth=5           " More space for displaying messages
set ttymouse=sgr          " To enable alacritty mouse support
set mouse=a               " enable mouse
set fo+=t                 " font?
set t_Co=256              " to support 256 colors
set nocursorline          " Enable highlighting of the current line
set title                 " show title?
set bs=2                  " to solve backspace and delete problems
set noautoindent          " turn off autoindent
set ruler                 " Show the cursor position all the time
set shortmess=aoOTI       " CTRL-G show short message
set splitbelow            " Horizontal splits will automatically be below
set nomodeline            " to fraction a line insted of wrapped??
set showcmd               " show command in the last line of the screen
set noshowmatch           " When a bracket is inserted, briefly jump to the matching one
set tabstop=2             " Insert 2 spaces for a tab
set shiftwidth=2          " Change the number of space characters inserted for indentation
set expandtab             " Converts tabs to spaces
set cinoptions=(0,m1,:1   " affect the way 'cindent' reindents lines in a C program
"set tw=80                " Maximum width of text that is being inserted.  A longer line will be broken after white space to get this width
set formatoptions=tcqro2  " automatic formation for tcqro2 (e.g. press o to start a new line commented if previous is alredy commented)
set smartindent           " Makes indenting smart
"set laststatus=2         " if is equal to 0 Always display the status line
"set clipboard=unnamed     " to clipboard outside??
set clipboard+=unnamedplus     " to clipboard outside??
set softtabstop=2         " Number of spaces that a <Tab> counts for while performing editing operations, like inserting a <Tab> or using <BS> (used by ts=80)
set showtabline=1         " 0: never 1: only if there are at least two tab pages 2: always
set sidescroll=5          " The minimal number of columns to scroll horizontally
set scrolloff=4           " Minimal number of screen lines to keep above and below the cursor
set virtualedit=all       " allow cursor bypass end of line
set hlsearch              " When there is a previous search pattern, highlight all its matches
set incsearch             " While typing a search command, show where the pattern
set ignorecase            " to search ignoring the case
set smartcase             " Override the 'ignorecase' option if the search pattern contains upper case characters
set foldmethod=marker     " The kind of folding used for the current window (marker:Markers are used to specify folds)
set ttyfast               " Indicates a fast terminal connection.  More characters will be sent to the screen for redrawing
set history=10000         " the size of 'The command-lines that you enter are remembered in a history table'
set hidden                " When off a buffer is unloaded when it is abandoned.  When on a buffer becomes hidden when it is abandoned
"set colorcolumn=81       " is a comma separated list of screen columns that are highlighted with ColorColumn hl-ColorColumn
set number                " line number
set complete=.,w,b,u,t    " Set the matches for Insert mode completion. Can only be used in Insert mode.  You need to use a mapping with CTRL-R = (see i_CTRL-R).  It does not work after CTRL-O or with an expression mapping
set completeopt=longest,menuone,preview               " A comma separated list of options for Insert mode completion
set noswapfile                                        " If it contains a command that loads a new buffer, it will be loaded without creating a swapfile and the 'swapfile' option will be reset
set foldlevelstart=0                                  " when starting to edit another buffer in a window. Useful to always start editing with all folds closed (value zero), some folds closed (one) or no folds closed (99)
set wildmenu                                          " command-line completion operates in an enhanced mode.  On pressing 'wildchar' (usually <Tab>) to invoke completion
set wildmode=list:longest,full                        " Enable autocompletion
"set wildmode=longest,list,full                       " Enable autocompletion luke smith
set nowrap                                            " Display long lines as just one line
"set statusline=%{getcwd()}\/\%f%=%-14.(%l,%c%V%)\ %P  " f:Path to the file in the buffer l:line number c:column number V:virtual comlumn number P:Percentage through file of displayed window
set autoread                                          " When a file has been detected to have been changed outside of Vim and it has not been changed inside of Vim, automatically read it again
set conceallevel=0                                    " So that I can see \textbf \textin in latex files and `` in markdown
set concealcursor=vin                                 " conceal cursor in [v]isual [i]nsert [n]ormal [c]ommand mode

" backup
set undodir=~/.vim/tmp/undo//
set backupdir=~/.vim/tmp/backup//
set directory=~/.vim/tmp/swap//
set viminfofile=$XDG_CACHE_HOME/vim/viminfo
"if !has('nvim') | set viminfofile=$XDG_CACHE_HOME/vim/viminfo | endif

" make directories automatically if they don't already exist
if !isdirectory(expand(&undodir))
    call mkdir(expand(&undodir), "p")
endif
if !isdirectory(expand(&backupdir))
    call mkdir(expand(&backupdir), "p")
endif
if !isdirectory(expand(&directory))
    call mkdir(expand(&directory), "p")
endif

" close brackets
:inoremap ( ()<Esc>i
:inoremap < <><Esc>i
:inoremap { {}<Esc>i
:inoremap [ []<Esc>i
:inoremap " ""<Esc>i
:inoremap ' ''<Esc>i
:inoremap ` ``<Esc>i

" cursorline
"au WinLeave * set nocursorline
"au WinEnter * set cursorline
"set cursorline"Mode Settings


" Disable highlighting matching parenthesis in insert mode
"au InsertEnter * NoMatchParen
"au InsertLeave * DoMatchParen
" Disable highlighting matching parenthesis in every mode
"let g:loaded_matchparen=1


""highlight Cursor guifg=white guibg=black
""highlight iCursor guifg=white guibg=steelblue
""set guicursor=n-v-c:block-Cursor
""set guicursor+=i:ver100-iCursor
""set guicursor+=n-v-c:blinkon0
""set guicursor+=i:blinkwait10"let &t_SI.="\e[6 q" "SI = INSERT mode

let &t_SI.="\e[6 q" "SR = REPLACE mode
let &t_SR.="\e[4 q" "SR = REPLACE mode
let &t_EI.="\e[2 q" "EI = NORMAL mode (ELSE)
"Cursor settings:
"  1 -> blinking block
"  2 -> solid block
"  3 -> blinking underscore
"  4 -> solid underscore
"  5 -> blinking vertical bar
"  6 -> solid vertical bar
"set ttimeout
"set ttimeoutlen=1
"set listchars=tab:>-,trail:~,extends:>,precedes:<,space:.
"set ttyfast

" sources
source $HOME/.vim/keys/mappings.vim
source $HOME/.vim/plug-config/nerdtree-config.vim
source $HOME/.vim/plug-config/devicons-config.vim

" to remember previous position
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" Vim-slime to interact with vim:terminal
let g:slime_target = "vimterminal"

" clang stuff
let g:clang_library_path='/usr/lib/'
let g:clang_user_options='|| exit 0'
let g:clang_complete_auto = 0
let g:clang_compelte_macros=1
let g:clang_complete_copen = 0
let g:clang_debug = 1
let g:clang_snippets=1
let g:clang_conceal_snippets=1
let g:clang_snippets_engine='clang_complete'
let g:clang_auto_select = 1
let g:clang_use_library = 1
let g:clang_complete_optional_args_in_snippets = 1

" jedi
let g:jedi#completions_enabled = 1
let g:jedi#force_py_version = 3

